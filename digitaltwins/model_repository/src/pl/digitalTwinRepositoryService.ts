/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { DigitalTwinRepositoryServiceContext } from "./digitalTwinRepositoryServiceContext";

class DigitalTwinRepositoryService extends DigitalTwinRepositoryServiceContext {
  /**
   * Initializes a new instance of the DigitalTwinRepositoryService class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, options?: Models.DigitalTwinRepositoryServiceOptions) {
    super(credentials, options);
  }

  /**
   * @summary Gets a DigitalTwin model object for the given digital twin model id.
   * @param modelId Digital twin model id Ex: <example>urn:contoso:com:temparaturesensor:1</example>
   * @param apiVersion Api version string.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetModelResponse>
   */
  getModel(modelId: string, apiVersion: string, options?: Models.DigitalTwinRepositoryServiceGetModelOptionalParams): Promise<Models.GetModelResponse>;
  /**
   * @param modelId Digital twin model id Ex: <example>urn:contoso:com:temparaturesensor:1</example>
   * @param apiVersion Api version string.
   * @param callback The callback
   */
  getModel(modelId: string, apiVersion: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param modelId Digital twin model id Ex: <example>urn:contoso:com:temparaturesensor:1</example>
   * @param apiVersion Api version string.
   * @param options The optional parameters
   * @param callback The callback
   */
  getModel(modelId: string, apiVersion: string, options: Models.DigitalTwinRepositoryServiceGetModelOptionalParams, callback: msRest.ServiceCallback<any>): void;
  getModel(modelId: string, apiVersion: string, options?: Models.DigitalTwinRepositoryServiceGetModelOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetModelResponse> {
    return this.sendOperationRequest(
      {
        modelId,
        apiVersion,
        options
      },
      getModelOperationSpec,
      callback) as Promise<Models.GetModelResponse>;
  }

  /**
   * @summary Creates or updates a DigitalTwin Model in a repository.
   * @param modelId Digital twin model id Ex: <example>urn:contoso:TemparatureSensor:1</example>
   * @param apiVersion Api version string.
   * @param content Model definition in Digital Twin Definition Language format.
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateOrUpdateModelResponse>
   */
  createOrUpdateModel(modelId: string, apiVersion: string, content: any, options?: Models.DigitalTwinRepositoryServiceCreateOrUpdateModelOptionalParams): Promise<Models.CreateOrUpdateModelResponse>;
  /**
   * @param modelId Digital twin model id Ex: <example>urn:contoso:TemparatureSensor:1</example>
   * @param apiVersion Api version string.
   * @param content Model definition in Digital Twin Definition Language format.
   * @param callback The callback
   */
  createOrUpdateModel(modelId: string, apiVersion: string, content: any, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param modelId Digital twin model id Ex: <example>urn:contoso:TemparatureSensor:1</example>
   * @param apiVersion Api version string.
   * @param content Model definition in Digital Twin Definition Language format.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateModel(modelId: string, apiVersion: string, content: any, options: Models.DigitalTwinRepositoryServiceCreateOrUpdateModelOptionalParams, callback: msRest.ServiceCallback<void>): void;
  createOrUpdateModel(modelId: string, apiVersion: string, content: any, options?: Models.DigitalTwinRepositoryServiceCreateOrUpdateModelOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.CreateOrUpdateModelResponse> {
    return this.sendOperationRequest(
      {
        modelId,
        apiVersion,
        content,
        options
      },
      createOrUpdateModelOperationSpec,
      callback) as Promise<Models.CreateOrUpdateModelResponse>;
  }

  /**
   * @summary Deletes a Digital twin model from the repository.
   * @param modelId Model id Ex: <example>urn:contoso:com:temparaturesensor:1</example>
   * @param repositoryId Private repository id. To access global repository, caller should not
   * specify this value.
   * @param apiVersion Api version string.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteModelResponse>
   */
  deleteModel(modelId: string, repositoryId: string, apiVersion: string, options?: Models.DigitalTwinRepositoryServiceDeleteModelOptionalParams): Promise<Models.DeleteModelResponse>;
  /**
   * @param modelId Model id Ex: <example>urn:contoso:com:temparaturesensor:1</example>
   * @param repositoryId Private repository id. To access global repository, caller should not
   * specify this value.
   * @param apiVersion Api version string.
   * @param callback The callback
   */
  deleteModel(modelId: string, repositoryId: string, apiVersion: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param modelId Model id Ex: <example>urn:contoso:com:temparaturesensor:1</example>
   * @param repositoryId Private repository id. To access global repository, caller should not
   * specify this value.
   * @param apiVersion Api version string.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteModel(modelId: string, repositoryId: string, apiVersion: string, options: Models.DigitalTwinRepositoryServiceDeleteModelOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteModel(modelId: string, repositoryId: string, apiVersion: string, options?: Models.DigitalTwinRepositoryServiceDeleteModelOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.DeleteModelResponse> {
    return this.sendOperationRequest(
      {
        modelId,
        repositoryId,
        apiVersion,
        options
      },
      deleteModelOperationSpec,
      callback) as Promise<Models.DeleteModelResponse>;
  }

  /**
   * @summary Searches repository for Digital twin models matching supplied search options.
   * @param searchOptions searchKeyword: To search models with the keyword.
   * modelFilterType: To filter a type of Digital twin models (Ex: Interface or CapabilityModel).
   * pageSize: Page size per request.
   * continuationToken: When there are more results than a page size, server responds with a
   * continuation token. Supply this token to retrieve next page results.
   * @param apiVersion Api version string.
   * @param [options] The optional parameters
   * @returns Promise<Models.SearchModelResponse>
   */
  searchModel(searchOptions: Models.SearchOptions, apiVersion: string, options?: Models.DigitalTwinRepositoryServiceSearchModelOptionalParams): Promise<Models.SearchModelResponse>;
  /**
   * @param searchOptions searchKeyword: To search models with the keyword.
   * modelFilterType: To filter a type of Digital twin models (Ex: Interface or CapabilityModel).
   * pageSize: Page size per request.
   * continuationToken: When there are more results than a page size, server responds with a
   * continuation token. Supply this token to retrieve next page results.
   * @param apiVersion Api version string.
   * @param callback The callback
   */
  searchModel(searchOptions: Models.SearchOptions, apiVersion: string, callback: msRest.ServiceCallback<Models.SearchResponse>): void;
  /**
   * @param searchOptions searchKeyword: To search models with the keyword.
   * modelFilterType: To filter a type of Digital twin models (Ex: Interface or CapabilityModel).
   * pageSize: Page size per request.
   * continuationToken: When there are more results than a page size, server responds with a
   * continuation token. Supply this token to retrieve next page results.
   * @param apiVersion Api version string.
   * @param options The optional parameters
   * @param callback The callback
   */
  searchModel(searchOptions: Models.SearchOptions, apiVersion: string, options: Models.DigitalTwinRepositoryServiceSearchModelOptionalParams, callback: msRest.ServiceCallback<Models.SearchResponse>): void;
  searchModel(searchOptions: Models.SearchOptions, apiVersion: string, options?: Models.DigitalTwinRepositoryServiceSearchModelOptionalParams | msRest.ServiceCallback<Models.SearchResponse>, callback?: msRest.ServiceCallback<Models.SearchResponse>): Promise<Models.SearchModelResponse> {
    return this.sendOperationRequest(
      {
        searchOptions,
        apiVersion,
        options
      },
      searchModelOperationSpec,
      callback) as Promise<Models.SearchModelResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "models/{modelId}",
  urlParameters: [
    Parameters.modelId
  ],
  queryParameters: [
    Parameters.repositoryId0,
    Parameters.apiVersion,
    Parameters.expand
  ],
  headerParameters: [
    Parameters.xMsClientRequestId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      },
      headersMapper: Mappers.GetModelHeaders
    },
    default: {}
  },
  serializer
};

const createOrUpdateModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "models/{modelId}",
  urlParameters: [
    Parameters.modelId
  ],
  queryParameters: [
    Parameters.repositoryId0,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.xMsClientRequestId,
    Parameters.ifMatch
  ],
  requestBody: {
    parameterPath: "content",
    mapper: {
      required: true,
      serializedName: "content",
      type: {
        name: "Object"
      }
    }
  },
  responses: {
    201: {
      headersMapper: Mappers.CreateOrUpdateModelHeaders
    },
    204: {
      headersMapper: Mappers.CreateOrUpdateModelHeaders
    },
    412: {
      headersMapper: Mappers.CreateOrUpdateModelHeaders
    },
    default: {}
  },
  serializer
};

const deleteModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "models/{modelId}",
  urlParameters: [
    Parameters.modelId
  ],
  queryParameters: [
    Parameters.repositoryId1,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.xMsClientRequestId
  ],
  responses: {
    204: {
      headersMapper: Mappers.DeleteModelHeaders
    },
    default: {}
  },
  serializer
};

const searchModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "models/search",
  queryParameters: [
    Parameters.repositoryId0,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.xMsClientRequestId
  ],
  requestBody: {
    parameterPath: "searchOptions",
    mapper: {
      ...Mappers.SearchOptions,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SearchResponse,
      headersMapper: Mappers.SearchModelHeaders
    },
    default: {}
  },
  serializer
};

export {
  DigitalTwinRepositoryService,
  DigitalTwinRepositoryServiceContext,
  Models as DigitalTwinRepositoryServiceModels,
  Mappers as DigitalTwinRepositoryServiceMappers
};
