/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { ServiceClientOptions } from "@azure/ms-rest-js";
import * as msRest from "@azure/ms-rest-js";


/**
 * @interface
 * An interface representing ConfigurationMetrics.
 * Configuration Metrics
 *
 */
export interface ConfigurationMetrics {
  /**
   * @member {{ [propertyName: string]: number }} [results]
   */
  results?: { [propertyName: string]: number };
  /**
   * @member {{ [propertyName: string]: string }} [queries]
   */
  queries?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing ConfigurationContent.
 * Configuration Content for Devices or Modules on Edge Devices.
 *
 */
export interface ConfigurationContent {
  /**
   * @member {{ [propertyName: string]: any }} [deviceContent] Gets or sets
   * device Configurations
   */
  deviceContent?: { [propertyName: string]: any };
  /**
   * @member {{ [propertyName: string]: { [propertyName: string]: any } }}
   * [modulesContent] Gets or sets Modules Configurations
   */
  modulesContent?: { [propertyName: string]: { [propertyName: string]: any } };
  /**
   * @member {{ [propertyName: string]: any }} [moduleContent] Gets or sets
   * Module Configurations
   */
  moduleContent?: { [propertyName: string]: any };
}

/**
 * @interface
 * An interface representing Configuration.
 * Configuration for IotHub devices and modules.
 *
 */
export interface Configuration {
  /**
   * @member {string} [id] Gets Identifier for the configuration
   */
  id?: string;
  /**
   * @member {string} [schemaVersion] Gets Schema version for the configuration
   */
  schemaVersion?: string;
  /**
   * @member {{ [propertyName: string]: string }} [labels] Gets or sets labels
   * for the configuration
   */
  labels?: { [propertyName: string]: string };
  /**
   * @member {ConfigurationContent} [content] Gets or sets Content for the
   * configuration
   */
  content?: ConfigurationContent;
  /**
   * @member {string} [targetCondition] Gets or sets Target Condition for the
   * configuration
   */
  targetCondition?: string;
  /**
   * @member {Date} [createdTimeUtc] Gets creation time for the configuration
   */
  createdTimeUtc?: Date;
  /**
   * @member {Date} [lastUpdatedTimeUtc] Gets last update time for the
   * configuration
   */
  lastUpdatedTimeUtc?: Date;
  /**
   * @member {number} [priority] Gets or sets Priority for the configuration
   */
  priority?: number;
  /**
   * @member {ConfigurationMetrics} [systemMetrics] System Configuration
   * Metrics
   */
  systemMetrics?: ConfigurationMetrics;
  /**
   * @member {ConfigurationMetrics} [metrics] Custom Configuration Metrics
   */
  metrics?: ConfigurationMetrics;
  /**
   * @member {string} [etag] Gets or sets configuration's ETag
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing ConfigurationQueriesTestInput.
 */
export interface ConfigurationQueriesTestInput {
  /**
   * @member {string} [targetCondition]
   */
  targetCondition?: string;
  /**
   * @member {{ [propertyName: string]: string }} [customMetricQueries]
   */
  customMetricQueries?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing ConfigurationQueriesTestResponse.
 */
export interface ConfigurationQueriesTestResponse {
  /**
   * @member {string} [targetConditionError]
   */
  targetConditionError?: string;
  /**
   * @member {{ [propertyName: string]: string }} [customMetricQueryErrors]
   */
  customMetricQueryErrors?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing RegistryStatistics.
 */
export interface RegistryStatistics {
  /**
   * @member {number} [totalDeviceCount]
   */
  totalDeviceCount?: number;
  /**
   * @member {number} [enabledDeviceCount]
   */
  enabledDeviceCount?: number;
  /**
   * @member {number} [disabledDeviceCount]
   */
  disabledDeviceCount?: number;
}

/**
 * @interface
 * An interface representing ServiceStatistics.
 */
export interface ServiceStatistics {
  /**
   * @member {number} [connectedDeviceCount]
   */
  connectedDeviceCount?: number;
}

/**
 * @interface
 * An interface representing SymmetricKey.
 */
export interface SymmetricKey {
  /**
   * @member {string} [primaryKey]
   */
  primaryKey?: string;
  /**
   * @member {string} [secondaryKey]
   */
  secondaryKey?: string;
}

/**
 * @interface
 * An interface representing X509Thumbprint.
 */
export interface X509Thumbprint {
  /**
   * @member {string} [primaryThumbprint]
   */
  primaryThumbprint?: string;
  /**
   * @member {string} [secondaryThumbprint]
   */
  secondaryThumbprint?: string;
}

/**
 * @interface
 * An interface representing AuthenticationMechanism.
 */
export interface AuthenticationMechanism {
  /**
   * @member {SymmetricKey} [symmetricKey]
   */
  symmetricKey?: SymmetricKey;
  /**
   * @member {X509Thumbprint} [x509Thumbprint]
   */
  x509Thumbprint?: X509Thumbprint;
  /**
   * @member {Type} [type] Possible values include: 'sas', 'selfSigned',
   * 'certificateAuthority', 'none'
   */
  type?: Type;
}

/**
 * @interface
 * An interface representing DeviceCapabilities.
 * Status of Capabilities enabled on the device
 *
 */
export interface DeviceCapabilities {
  /**
   * @member {boolean} [iotEdge]
   */
  iotEdge?: boolean;
}

/**
 * @interface
 * An interface representing Device.
 */
export interface Device {
  /**
   * @member {string} [deviceId]
   */
  deviceId?: string;
  /**
   * @member {string} [generationId]
   */
  generationId?: string;
  /**
   * @member {string} [etag]
   */
  etag?: string;
  /**
   * @member {ConnectionState} [connectionState] Possible values include:
   * 'Disconnected', 'Connected'
   */
  connectionState?: ConnectionState;
  /**
   * @member {Status} [status] Possible values include: 'enabled', 'disabled'
   */
  status?: Status;
  /**
   * @member {string} [statusReason]
   */
  statusReason?: string;
  /**
   * @member {Date} [connectionStateUpdatedTime]
   */
  connectionStateUpdatedTime?: Date;
  /**
   * @member {Date} [statusUpdatedTime]
   */
  statusUpdatedTime?: Date;
  /**
   * @member {Date} [lastActivityTime]
   */
  lastActivityTime?: Date;
  /**
   * @member {number} [cloudToDeviceMessageCount]
   */
  cloudToDeviceMessageCount?: number;
  /**
   * @member {AuthenticationMechanism} [authentication]
   */
  authentication?: AuthenticationMechanism;
  /**
   * @member {DeviceCapabilities} [capabilities]
   */
  capabilities?: DeviceCapabilities;
  /**
   * @member {string} [deviceScope]
   */
  deviceScope?: string;
}

/**
 * @interface
 * An interface representing PropertyContainer.
 * Represents Twin properties
 *
 */
export interface PropertyContainer {
  /**
   * @member {{ [propertyName: string]: any }} [desired] Used in conjunction
   * with reported properties to synchronize device configuration or condition.
   * Desired properties can only be set by the solution back end and can be
   * read by the device app. The device app can also be notified in real time
   * of changes on the desired properties.
   */
  desired?: { [propertyName: string]: any };
  /**
   * @member {{ [propertyName: string]: any }} [reported] Used in conjunction
   * with desired properties to synchronize device configuration or condition.
   * Reported properties can only be set by the device app and can be read and
   * queried by the solution back end.
   */
  reported?: { [propertyName: string]: any };
}

/**
 * @interface
 * An interface representing ExportImportDevice.
 */
export interface ExportImportDevice {
  /**
   * @member {string} [id]
   */
  id?: string;
  /**
   * @member {string} [moduleId]
   */
  moduleId?: string;
  /**
   * @member {string} [eTag]
   */
  eTag?: string;
  /**
   * @member {ImportMode} [importMode] Possible values include:
   * 'createOrUpdate', 'create', 'update', 'updateIfMatchETag',
   * 'createOrUpdateIfMatchETag', 'delete', 'deleteIfMatchETag', 'updateTwin',
   * 'updateTwinIfMatchETag'
   */
  importMode?: ImportMode;
  /**
   * @member {Status1} [status] Possible values include: 'enabled', 'disabled'
   */
  status?: Status1;
  /**
   * @member {string} [statusReason]
   */
  statusReason?: string;
  /**
   * @member {AuthenticationMechanism} [authentication]
   */
  authentication?: AuthenticationMechanism;
  /**
   * @member {string} [twinETag]
   */
  twinETag?: string;
  /**
   * @member {{ [propertyName: string]: any }} [tags]
   */
  tags?: { [propertyName: string]: any };
  /**
   * @member {PropertyContainer} [properties]
   */
  properties?: PropertyContainer;
  /**
   * @member {DeviceCapabilities} [capabilities]
   */
  capabilities?: DeviceCapabilities;
  /**
   * @member {string} [deviceScope]
   */
  deviceScope?: string;
}

/**
 * @interface
 * An interface representing DeviceRegistryOperationError.
 * Encapsulates device registry operation error details.
 *
 */
export interface DeviceRegistryOperationError {
  /**
   * @member {string} [deviceId] The ID of the device that indicated the error.
   */
  deviceId?: string;
  /**
   * @member {ErrorCode} [errorCode] ErrorCode associated with the error.
   * Possible values include: 'InvalidErrorCode', 'GenericBadRequest',
   * 'InvalidProtocolVersion', 'DeviceInvalidResultCount', 'InvalidOperation',
   * 'ArgumentInvalid', 'ArgumentNull', 'IotHubFormatError',
   * 'DeviceStorageEntitySerializationError', 'BlobContainerValidationError',
   * 'ImportWarningExistsError', 'InvalidSchemaVersion',
   * 'DeviceDefinedMultipleTimes', 'DeserializationError',
   * 'BulkRegistryOperationFailure', 'DefaultStorageEndpointNotConfigured',
   * 'InvalidFileUploadCorrelationId', 'ExpiredFileUploadCorrelationId',
   * 'InvalidStorageEndpoint', 'InvalidMessagingEndpoint',
   * 'InvalidFileUploadCompletionStatus', 'InvalidStorageEndpointOrBlob',
   * 'RequestCanceled', 'InvalidStorageEndpointProperty', 'EtagDoesNotMatch',
   * 'RequestTimedOut', 'UnsupportedOperationOnReplica', 'NullMessage',
   * 'ConnectionForcefullyClosedOnNewConnection', 'InvalidDeviceScope',
   * 'ConnectionForcefullyClosedOnFaultInjection',
   * 'ConnectionRejectedOnFaultInjection', 'InvalidRouteTestInput',
   * 'InvalidSourceOnRoute', 'RoutingNotEnabled',
   * 'InvalidContentEncodingOrType', 'InvalidEndorsementKey',
   * 'InvalidRegistrationId', 'InvalidStorageRootKey',
   * 'InvalidEnrollmentGroupId', 'TooManyEnrollments',
   * 'RegistrationIdDefinedMultipleTimes', 'CustomAllocationFailed',
   * 'CustomAllocationIotHubNotSpecified',
   * 'CustomAllocationUnauthorizedAccess', 'CannotRegisterModuleToModule',
   * 'TenantHubRoutingNotEnabled', 'InvalidConfigurationTargetCondition',
   * 'InvalidConfigurationContent',
   * 'CannotModifyImmutableConfigurationContent',
   * 'InvalidConfigurationCustomMetricsQuery', 'InvalidPnPInterfaceDefinition',
   * 'InvalidPnPDesiredProperties', 'InvalidPnPReportedProperties',
   * 'InvalidPnPWritableReportedProperties', 'GenericUnauthorized',
   * 'IotHubNotFound', 'IotHubUnauthorizedAccess', 'IotHubUnauthorized',
   * 'ElasticPoolNotFound', 'SystemModuleModifyUnauthorizedAccess',
   * 'GenericForbidden', 'IotHubSuspended', 'IotHubQuotaExceeded',
   * 'JobQuotaExceeded', 'DeviceMaximumQueueDepthExceeded',
   * 'IotHubMaxCbsTokenExceeded', 'DeviceMaximumActiveFileUploadLimitExceeded',
   * 'DeviceMaximumQueueSizeExceeded', 'RoutingEndpointResponseForbidden',
   * 'InvalidMessageExpiryTime', 'OperationNotAvailableInCurrentTier',
   * 'DeviceModelMaxPropertiesExceeded',
   * 'DeviceModelMaxIndexablePropertiesExceeded', 'IotDpsSuspended',
   * 'IotDpsSuspending', 'GenericNotFound', 'DeviceNotFound', 'JobNotFound',
   * 'QuotaMetricNotFound', 'SystemPropertyNotFound', 'AmqpAddressNotFound',
   * 'RoutingEndpointResponseNotFound', 'CertificateNotFound',
   * 'ElasticPoolTenantHubNotFound', 'ModuleNotFound',
   * 'AzureTableStoreNotFound', 'IotHubFailingOver', 'FeatureNotSupported',
   * 'DigitalTwinInterfaceNotFound', 'QueryStoreClusterNotFound',
   * 'DeviceNotOnline', 'DeviceConnectionClosedRemotely', 'EnrollmentNotFound',
   * 'DeviceRegistrationNotFound', 'AsyncOperationNotFound',
   * 'EnrollmentGroupNotFound', 'ConfigurationNotFound', 'GroupNotFound',
   * 'DigitalTwinModelNotFound', 'InterfaceNameModelNotFound',
   * 'GenericMethodNotAllowed', 'OperationNotAllowedInCurrentState',
   * 'ImportDevicesNotSupported', 'BulkAddDevicesNotSupported',
   * 'GenericConflict', 'DeviceAlreadyExists', 'LinkCreationConflict',
   * 'CallbackSubscriptionConflict', 'ModelAlreadyExists', 'DeviceLocked',
   * 'DeviceJobAlreadyExists', 'JobAlreadyExists', 'EnrollmentConflict',
   * 'EnrollmentGroupConflict', 'RegistrationStatusConflict',
   * 'ModuleAlreadyExistsOnDevice', 'ConfigurationAlreadyExists',
   * 'ApplyConfigurationAlreadyInProgressOnDevice',
   * 'DigitalTwinModelAlreadyExists',
   * 'DigitalTwinModelExistsWithOtherModelType',
   * 'InterfaceNameModelAlreadyExists', 'GenericPreconditionFailed',
   * 'PreconditionFailed', 'DeviceMessageLockLost', 'JobRunPreconditionFailed',
   * 'InflightMessagesInLink', 'GenericRequestEntityTooLarge',
   * 'MessageTooLarge', 'TooManyDevices', 'TooManyModulesOnDevice',
   * 'ConfigurationCountLimitExceeded', 'DigitalTwinModelCountLimitExceeded',
   * 'GenericUnsupportedMediaType', 'IncompatibleDataType',
   * 'GenericTooManyRequests', 'ThrottlingException',
   * 'ThrottleBacklogLimitExceeded', 'ThrottlingBacklogTimeout',
   * 'ThrottlingMaxActiveJobCountExceeded', 'ClientClosedRequest',
   * 'GenericServerError', 'ServerError', 'JobCancelled',
   * 'StatisticsRetrievalError', 'ConnectionForcefullyClosed',
   * 'InvalidBlobState', 'BackupTimedOut', 'AzureStorageTimeout',
   * 'GenericTimeout', 'InvalidThrottleParameter', 'EventHubLinkAlreadyClosed',
   * 'ReliableBlobStoreError', 'RetryAttemptsExhausted',
   * 'AzureTableStoreError', 'CheckpointStoreNotFound',
   * 'DocumentDbInvalidReturnValue', 'ReliableDocDbStoreStoreError',
   * 'ReliableBlobStoreTimeoutError', 'ConfigReadFailed',
   * 'InvalidContainerReceiveLink', 'InvalidPartitionEpoch', 'RestoreTimedOut',
   * 'StreamReservationFailure', 'UnexpectedPropertyValue',
   * 'OrchestrationOperationFailed', 'ModelRepoEndpointError',
   * 'ResolutionError', 'GenericBadGateway', 'InvalidResponseWhileProxying',
   * 'GenericServiceUnavailable', 'ServiceUnavailable', 'PartitionNotFound',
   * 'IotHubActivationFailed', 'ServerBusy', 'IotHubRestoring',
   * 'ReceiveLinkOpensThrottled', 'ConnectionUnavailable', 'DeviceUnavailable',
   * 'ConfigurationNotAvailable', 'GroupNotAvailable', 'GenericGatewayTimeout',
   * 'GatewayTimeout'
   */
  errorCode?: ErrorCode;
  /**
   * @member {string} [errorStatus] Additional details associated with the
   * error.
   */
  errorStatus?: string;
  /**
   * @member {string} [moduleId]
   */
  moduleId?: string;
  /**
   * @member {string} [operation]
   */
  operation?: string;
}

/**
 * @interface
 * An interface representing DeviceRegistryOperationWarning.
 * Encapsulates device registry operation error details.
 *
 */
export interface DeviceRegistryOperationWarning {
  /**
   * @member {string} [deviceId] The ID of the device that indicated the
   * warning.
   */
  deviceId?: string;
  /**
   * @member {WarningCode} [warningCode] Possible values include:
   * 'DeviceRegisteredWithoutTwin'
   */
  warningCode?: WarningCode;
  /**
   * @member {string} [warningStatus] Additional details associated with the
   * warning.
   */
  warningStatus?: string;
}

/**
 * @interface
 * An interface representing BulkRegistryOperationResult.
 * Encapsulates the result of a bulk registry operation.
 *
 */
export interface BulkRegistryOperationResult {
  /**
   * @member {boolean} [isSuccessful] Whether or not the operation was
   * successful.
   */
  isSuccessful?: boolean;
  /**
   * @member {DeviceRegistryOperationError[]} [errors] If the operation was not
   * successful, this contains an array of DeviceRegistryOperationError
   * objects.
   */
  errors?: DeviceRegistryOperationError[];
  /**
   * @member {DeviceRegistryOperationWarning[]} [warnings] If the operation was
   * partially successful, this contains an array of
   * DeviceRegistryOperationWarning objects.
   */
  warnings?: DeviceRegistryOperationWarning[];
}

/**
 * @interface
 * An interface representing QuerySpecification.
 * A Json query request
 *
 */
export interface QuerySpecification {
  /**
   * @member {string} [query] The query.
   */
  query?: string;
}

/**
 * @interface
 * An interface representing QueryResult.
 * The query result.
 *
 */
export interface QueryResult {
  /**
   * @member {Type1} [type] The query result type. Possible values include:
   * 'unknown', 'twin', 'deviceJob', 'jobResponse', 'raw', 'enrollment',
   * 'enrollmentGroup', 'deviceRegistration'
   */
  type?: Type1;
  /**
   * @member {any[]} [items] The query result items, as a collection.
   */
  items?: any[];
  /**
   * @member {string} [continuationToken] Request continuation token.
   */
  continuationToken?: string;
}

/**
 * @interface
 * An interface representing JobProperties.
 */
export interface JobProperties {
  /**
   * @member {string} [jobId] System generated.  Ignored at creation.
   */
  jobId?: string;
  /**
   * @member {Date} [startTimeUtc] System generated.  Ignored at creation.
   */
  startTimeUtc?: Date;
  /**
   * @member {Date} [endTimeUtc] System generated.  Ignored at creation.
   * Represents the time the job stopped processing.
   */
  endTimeUtc?: Date;
  /**
   * @member {Type2} [type] Required.
   * The type of job to execute. Possible values include: 'unknown', 'export',
   * 'import', 'backup', 'readDeviceProperties', 'writeDeviceProperties',
   * 'updateDeviceConfiguration', 'rebootDevice', 'factoryResetDevice',
   * 'firmwareUpdate', 'scheduleDeviceMethod', 'scheduleUpdateTwin',
   * 'restoreFromBackup', 'failoverDataCopy'
   */
  type?: Type2;
  /**
   * @member {Status2} [status] System generated.  Ignored at creation.
   * Possible values include: 'unknown', 'enqueued', 'running', 'completed',
   * 'failed', 'cancelled', 'scheduled', 'queued'
   */
  status?: Status2;
  /**
   * @member {number} [progress] System generated.  Ignored at creation.
   * Represents the percentage of completion.
   */
  progress?: number;
  /**
   * @member {string} [inputBlobContainerUri] URI containing SAS token to a
   * blob container that contains registry data to sync.
   */
  inputBlobContainerUri?: string;
  /**
   * @member {string} [inputBlobName] The blob name to be used when importing
   * from the provided input blob container.
   */
  inputBlobName?: string;
  /**
   * @member {string} [outputBlobContainerUri] URI containing SAS token to a
   * blob container.  This is used to output the status of the job and the
   * results.
   */
  outputBlobContainerUri?: string;
  /**
   * @member {string} [outputBlobName] The name of the blob that will be
   * created in the provided output blob container.  This blob will contain
   * the exported device registry information for the IoT Hub.
   */
  outputBlobName?: string;
  /**
   * @member {boolean} [excludeKeysInExport] Optional for export jobs; ignored
   * for other jobs.  Default: false.  If false, authorization keys are
   * included
   * in export output.  Keys are exported as null otherwise.
   */
  excludeKeysInExport?: boolean;
  /**
   * @member {string} [failureReason] System genereated.  Ignored at creation.
   * If status == failure, this represents a string containing the reason.
   */
  failureReason?: string;
}

/**
 * @interface
 * An interface representing PurgeMessageQueueResult.
 * Result of a device message queue purge operation.
 *
 */
export interface PurgeMessageQueueResult {
  /**
   * @member {number} [totalMessagesPurged]
   */
  totalMessagesPurged?: number;
  /**
   * @member {string} [deviceId] The ID of the device whose messages are being
   * purged.
   */
  deviceId?: string;
  /**
   * @member {string} [moduleId] The ID of the device whose messages are being
   * purged.
   */
  moduleId?: string;
}

/**
 * @interface
 * An interface representing FaultInjectionConnectionProperties.
 */
export interface FaultInjectionConnectionProperties {
  /**
   * @member {Action} [action] Possible values include: 'None', 'CloseAll',
   * 'Periodic'
   */
  action?: Action;
  /**
   * @member {number} [blockDurationInMinutes]
   */
  blockDurationInMinutes?: number;
}

/**
 * @interface
 * An interface representing FaultInjectionProperties.
 */
export interface FaultInjectionProperties {
  /**
   * @member {string} [iotHubName]
   */
  iotHubName?: string;
  /**
   * @member {FaultInjectionConnectionProperties} [connection]
   */
  connection?: FaultInjectionConnectionProperties;
  /**
   * @member {Date} [lastUpdatedTimeUtc] Service generated.
   */
  lastUpdatedTimeUtc?: Date;
}

/**
 * @interface
 * An interface representing TwinProperties.
 * Represents Twin properties
 *
 */
export interface TwinProperties {
  /**
   * @member {{ [propertyName: string]: any }} [desired] Used in conjunction
   * with reported properties to synchronize device configuration or condition.
   * Desired properties can only be set by the solution back end and can be
   * read by the device app. The device app can also be notified in real time
   * of changes on the desired properties.
   */
  desired?: { [propertyName: string]: any };
  /**
   * @member {{ [propertyName: string]: any }} [reported] Used in conjunction
   * with desired properties to synchronize device configuration or condition.
   * Reported properties can only be set by the device app and can be read and
   * queried by the solution back end.
   */
  reported?: { [propertyName: string]: any };
}

/**
 * @interface
 * An interface representing Twin.
 * Twin Representation
 *
 */
export interface Twin {
  /**
   * @member {string} [deviceId] The deviceId uniquely identifies the device in
   * the IoT hub's identity registry. A case-sensitive string (up to 128 char
   * long) of ASCII 7-bit alphanumeric chars + {'-', ':', '.', '+', '%', '_',
   * '#', '*', '?', '!', '(', ')', ',', '=', '@', ';', '$', '''}.
   */
  deviceId?: string;
  /**
   * @member {string} [moduleId] Gets and sets the Module Id.
   */
  moduleId?: string;
  /**
   * @member {{ [propertyName: string]: any }} [tags] A JSON document read and
   * written by the solution back end. Tags are not visible to device apps.
   */
  tags?: { [propertyName: string]: any };
  /**
   * @member {TwinProperties} [properties] Gets and sets the Twin properties.
   */
  properties?: TwinProperties;
  /**
   * @member {string} [etag] Twin's ETag
   */
  etag?: string;
  /**
   * @member {number} [version] Version for device twin, including tags and
   * desired properties
   */
  version?: number;
  /**
   * @member {string} [deviceEtag] Device's ETag
   */
  deviceEtag?: string;
  /**
   * @member {Status3} [status] Gets the corresponding Device's Status.
   * Possible values include: 'enabled', 'disabled'
   */
  status?: Status3;
  /**
   * @member {string} [statusReason] Reason, if any, for the corresponding
   * Device to be in specified Status
   */
  statusReason?: string;
  /**
   * @member {Date} [statusUpdateTime] Time when the corresponding Device's
   * Status was last updated
   */
  statusUpdateTime?: Date;
  /**
   * @member {ConnectionState1} [connectionState] Corresponding Device's
   * ConnectionState. Possible values include: 'Disconnected', 'Connected'
   */
  connectionState?: ConnectionState1;
  /**
   * @member {Date} [lastActivityTime] The last time the device connected,
   * received or sent a message. In ISO8601 datetime format in UTC, for
   * example, 2015-01-28T16:24:48.789Z. This does not update if the device uses
   * the HTTP/1 protocol to perform messaging operations.
   */
  lastActivityTime?: Date;
  /**
   * @member {number} [cloudToDeviceMessageCount] Number of messages sent to
   * the corresponding Device from the Cloud
   */
  cloudToDeviceMessageCount?: number;
  /**
   * @member {AuthenticationType} [authenticationType] Corresponding Device's
   * authentication type. Possible values include: 'sas', 'selfSigned',
   * 'certificateAuthority', 'none'
   */
  authenticationType?: AuthenticationType;
  /**
   * @member {X509Thumbprint} [x509Thumbprint] Corresponding Device's X509
   * thumbprint
   */
  x509Thumbprint?: X509Thumbprint;
  /**
   * @member {DeviceCapabilities} [capabilities]
   */
  capabilities?: DeviceCapabilities;
  /**
   * @member {string} [deviceScope]
   */
  deviceScope?: string;
}

/**
 * @interface
 * An interface representing DesiredState.
 */
export interface DesiredState {
  /**
   * @member {number} [code] Status code for the operation.
   */
  code?: number;
  /**
   * @member {number} [subCode] Sub status code for the status.
   */
  subCode?: number;
  /**
   * @member {number} [version] Version of the desired value received.
   */
  version?: number;
  /**
   * @member {string} [description] Description of the status.
   */
  description?: string;
}

/**
 * @interface
 * An interface representing Reported.
 */
export interface Reported {
  /**
   * @member {any} [value] The current interface property value in a
   * digitalTwin.
   */
  value?: any;
  /**
   * @member {DesiredState} [desiredState]
   */
  desiredState?: DesiredState;
}

/**
 * @interface
 * An interface representing Desired.
 */
export interface Desired {
  /**
   * @member {any} [value] The desired value of the interface property to set
   * in a digitalTwin.
   */
  value?: any;
}

/**
 * @interface
 * An interface representing Property.
 */
export interface Property {
  /**
   * @member {Reported} [reported]
   */
  reported?: Reported;
  /**
   * @member {Desired} [desired]
   */
  desired?: Desired;
}

/**
 * @interface
 * An interface representing InterfaceModel.
 */
export interface InterfaceModel {
  /**
   * @member {string} [name] Full name of digital twin interface.
   */
  name?: string;
  /**
   * @member {{ [propertyName: string]: Property }} [properties] List of all
   * properties in an interface.
   */
  properties?: { [propertyName: string]: Property };
}

/**
 * @interface
 * An interface representing DigitalTwinInterfaces.
 */
export interface DigitalTwinInterfaces {
  /**
   * @member {{ [propertyName: string]: InterfaceModel }} [interfaces]
   * Interface(s) data on the digital twin.
   */
  interfaces?: { [propertyName: string]: InterfaceModel };
  /**
   * @member {number} [version] Version of digital twin.
   */
  version?: number;
}

/**
 * @interface
 * An interface representing CloudToDeviceMethod.
 * Parameters to execute a direct method on the device
 *
 */
export interface CloudToDeviceMethod {
  /**
   * @member {string} [methodName] Method to run
   */
  methodName?: string;
  /**
   * @member {any} [payload] Payload
   */
  payload?: any;
  /**
   * @member {number} [responseTimeoutInSeconds]
   */
  responseTimeoutInSeconds?: number;
  /**
   * @member {number} [connectTimeoutInSeconds]
   */
  connectTimeoutInSeconds?: number;
}

/**
 * @interface
 * An interface representing JobRequest.
 */
export interface JobRequest {
  /**
   * @member {string} [jobId] Job identifier
   */
  jobId?: string;
  /**
   * @member {Type3} [type] Required.
   * The type of job to execute. Possible values include: 'unknown', 'export',
   * 'import', 'backup', 'readDeviceProperties', 'writeDeviceProperties',
   * 'updateDeviceConfiguration', 'rebootDevice', 'factoryResetDevice',
   * 'firmwareUpdate', 'scheduleDeviceMethod', 'scheduleUpdateTwin',
   * 'restoreFromBackup', 'failoverDataCopy'
   */
  type?: Type3;
  /**
   * @member {CloudToDeviceMethod} [cloudToDeviceMethod] Required if jobType is
   * cloudToDeviceMethod.
   * The method type and parameters.
   */
  cloudToDeviceMethod?: CloudToDeviceMethod;
  /**
   * @member {Twin} [updateTwin]
   */
  updateTwin?: Twin;
  /**
   * @member {string} [queryCondition] Required if jobType is updateTwin or
   * cloudToDeviceMethod.
   * Condition for device query to get devices to execute the job on
   */
  queryCondition?: string;
  /**
   * @member {Date} [startTime] ISO 8601 date time to start the job
   */
  startTime?: Date;
  /**
   * @member {number} [maxExecutionTimeInSeconds] Max execution time in
   * secounds (ttl duration)
   */
  maxExecutionTimeInSeconds?: number;
}

/**
 * @interface
 * An interface representing DeviceJobStatistics.
 * The job counts, e.g., number of failed/succeeded devices
 *
 */
export interface DeviceJobStatistics {
  /**
   * @member {number} [deviceCount] Number of devices in the job
   */
  deviceCount?: number;
  /**
   * @member {number} [failedCount] The number of failed jobs
   */
  failedCount?: number;
  /**
   * @member {number} [succeededCount] The number of Successed jobs
   */
  succeededCount?: number;
  /**
   * @member {number} [runningCount] The number of running jobs
   */
  runningCount?: number;
  /**
   * @member {number} [pendingCount] The number of pending (scheduled) jobs
   */
  pendingCount?: number;
}

/**
 * @interface
 * An interface representing JobResponse.
 */
export interface JobResponse {
  /**
   * @member {string} [jobId] System generated.  Ignored at creation.
   */
  jobId?: string;
  /**
   * @member {string} [queryCondition] Device query condition.
   */
  queryCondition?: string;
  /**
   * @member {Date} [createdTime] System generated.  Ignored at creation.
   */
  createdTime?: Date;
  /**
   * @member {Date} [startTime] Scheduled job start time in UTC.
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] System generated.  Ignored at creation.
   * Represents the time the job stopped processing.
   */
  endTime?: Date;
  /**
   * @member {number} [maxExecutionTimeInSeconds] Max execution time in
   * secounds (ttl duration)
   */
  maxExecutionTimeInSeconds?: number;
  /**
   * @member {Type4} [type] Required.
   * The type of job to execute. Possible values include: 'unknown', 'export',
   * 'import', 'backup', 'readDeviceProperties', 'writeDeviceProperties',
   * 'updateDeviceConfiguration', 'rebootDevice', 'factoryResetDevice',
   * 'firmwareUpdate', 'scheduleDeviceMethod', 'scheduleUpdateTwin',
   * 'restoreFromBackup', 'failoverDataCopy'
   */
  type?: Type4;
  /**
   * @member {CloudToDeviceMethod} [cloudToDeviceMethod] Required if jobType is
   * cloudToDeviceMethod.
   * The method type and parameters.
   */
  cloudToDeviceMethod?: CloudToDeviceMethod;
  /**
   * @member {Twin} [updateTwin]
   */
  updateTwin?: Twin;
  /**
   * @member {Status4} [status] System generated.  Ignored at creation.
   * Possible values include: 'unknown', 'enqueued', 'running', 'completed',
   * 'failed', 'cancelled', 'scheduled', 'queued'
   */
  status?: Status4;
  /**
   * @member {string} [failureReason] System generated.  Ignored at creation.
   * If status == failure, this represents a string containing the reason.
   */
  failureReason?: string;
  /**
   * @member {string} [statusMessage] Status message for the job
   */
  statusMessage?: string;
  /**
   * @member {DeviceJobStatistics} [deviceJobStatistics] Job details
   */
  deviceJobStatistics?: DeviceJobStatistics;
}

/**
 * @interface
 * An interface representing Module.
 * Module identity on a device
 *
 */
export interface Module {
  /**
   * @member {string} [moduleId]
   */
  moduleId?: string;
  /**
   * @member {string} [managedBy]
   */
  managedBy?: string;
  /**
   * @member {string} [deviceId]
   */
  deviceId?: string;
  /**
   * @member {string} [generationId]
   */
  generationId?: string;
  /**
   * @member {string} [etag]
   */
  etag?: string;
  /**
   * @member {ConnectionState2} [connectionState] Possible values include:
   * 'Disconnected', 'Connected'
   */
  connectionState?: ConnectionState2;
  /**
   * @member {Date} [connectionStateUpdatedTime]
   */
  connectionStateUpdatedTime?: Date;
  /**
   * @member {Date} [lastActivityTime]
   */
  lastActivityTime?: Date;
  /**
   * @member {number} [cloudToDeviceMessageCount]
   */
  cloudToDeviceMessageCount?: number;
  /**
   * @member {AuthenticationMechanism} [authentication]
   */
  authentication?: AuthenticationMechanism;
}

/**
 * @interface
 * An interface representing CloudToDeviceMethodResult.
 * Represents the Device Method Invocation Results.
 *
 */
export interface CloudToDeviceMethodResult {
  /**
   * @member {number} [status] Method invocation result status.
   */
  status?: number;
  /**
   * @member {any} [payload] Method invocation result payload.
   */
  payload?: any;
}

/**
 * @interface
 * An interface representing DigitalTwinInterfacesPatchInterfacesValuePropertiesValueDesired.
 */
export interface DigitalTwinInterfacesPatchInterfacesValuePropertiesValueDesired {
  /**
   * @member {any} [value] The desired value of the interface property to set
   * in a digitalTwin.
   */
  value?: any;
}

/**
 * @interface
 * An interface representing DigitalTwinInterfacesPatchInterfacesValuePropertiesValue.
 */
export interface DigitalTwinInterfacesPatchInterfacesValuePropertiesValue {
  /**
   * @member {DigitalTwinInterfacesPatchInterfacesValuePropertiesValueDesired}
   * [desired]
   */
  desired?: DigitalTwinInterfacesPatchInterfacesValuePropertiesValueDesired;
}

/**
 * @interface
 * An interface representing DigitalTwinInterfacesPatchInterfacesValue.
 */
export interface DigitalTwinInterfacesPatchInterfacesValue {
  /**
   * @member {{ [propertyName: string]:
   * DigitalTwinInterfacesPatchInterfacesValuePropertiesValue }} [properties]
   * List of properties to update in an interface.
   */
  properties?: { [propertyName: string]: DigitalTwinInterfacesPatchInterfacesValuePropertiesValue };
}

/**
 * @interface
 * An interface representing DigitalTwinInterfacesPatch.
 */
export interface DigitalTwinInterfacesPatch {
  /**
   * @member {{ [propertyName: string]:
   * DigitalTwinInterfacesPatchInterfacesValue }} [interfaces] Interface(s)
   * data to patch in the digital twin.
   */
  interfaces?: { [propertyName: string]: DigitalTwinInterfacesPatchInterfacesValue };
}

/**
 * @interface
 * An interface representing IotHubGatewayServiceAPIs20190701PreviewOptions.
 * @extends ServiceClientOptions
 */
export interface IotHubGatewayServiceAPIs20190701PreviewOptions extends ServiceClientOptions {
  /**
   * @member {string} [apiVersion] Version of the Api. Default value:
   * '2019-07-01-preview' .
   */
  apiVersion?: string;
  /**
   * @member {string} [baseUri]
   */
  baseUri?: string;
}

/**
 * @interface
 * An interface representing ServiceCreateOrUpdateConfigurationOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ServiceCreateOrUpdateConfigurationOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch]
   */
  ifMatch?: string;
}

/**
 * @interface
 * An interface representing ServiceDeleteConfigurationOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ServiceDeleteConfigurationOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch]
   */
  ifMatch?: string;
}

/**
 * @interface
 * An interface representing ServiceGetConfigurationsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ServiceGetConfigurationsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {number} [top]
   */
  top?: number;
}

/**
 * @interface
 * An interface representing ServiceGetDevicesOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ServiceGetDevicesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {number} [top] This parameter when specified, defines the maximum
   * number of device identities that are returned. Any value outside the range
   * of 1-1000 is considered to be 1000.
   */
  top?: number;
}

/**
 * @interface
 * An interface representing ServiceCreateOrUpdateDeviceOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ServiceCreateOrUpdateDeviceOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch]
   */
  ifMatch?: string;
}

/**
 * @interface
 * An interface representing ServiceDeleteDeviceOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ServiceDeleteDeviceOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch]
   */
  ifMatch?: string;
}

/**
 * @interface
 * An interface representing ServiceReplaceTwinOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ServiceReplaceTwinOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch]
   */
  ifMatch?: string;
}

/**
 * @interface
 * An interface representing ServiceUpdateTwinOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ServiceUpdateTwinOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch]
   */
  ifMatch?: string;
}

/**
 * @interface
 * An interface representing ServiceReplaceModuleTwinOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ServiceReplaceModuleTwinOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch]
   */
  ifMatch?: string;
}

/**
 * @interface
 * An interface representing ServiceUpdateModuleTwinOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ServiceUpdateModuleTwinOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch]
   */
  ifMatch?: string;
}

/**
 * @interface
 * An interface representing ServiceQueryJobsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ServiceQueryJobsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [jobType] Job Type.
   */
  jobType?: string;
  /**
   * @member {string} [jobStatus] Job Status.
   */
  jobStatus?: string;
}

/**
 * @interface
 * An interface representing ServiceCreateOrUpdateModuleOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ServiceCreateOrUpdateModuleOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch]
   */
  ifMatch?: string;
}

/**
 * @interface
 * An interface representing ServiceDeleteModuleOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ServiceDeleteModuleOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch]
   */
  ifMatch?: string;
}

/**
 * @interface
 * An interface representing DigitalTwinUpdateInterfacesOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface DigitalTwinUpdateInterfacesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch]
   */
  ifMatch?: string;
}

/**
 * @interface
 * An interface representing DigitalTwinGetDigitalTwinModelOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface DigitalTwinGetDigitalTwinModelOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {boolean} [expand] Indicates whether to expand the device
   * capability model's interface definitions inline or not.
   * This query parameter ONLY applies to Capability model.
   */
  expand?: boolean;
}

/**
 * @interface
 * An interface representing DigitalTwinInvokeInterfaceCommandOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface DigitalTwinInvokeInterfaceCommandOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {number} [connectTimeoutInSeconds] Connect timeout in seconds.
   */
  connectTimeoutInSeconds?: number;
  /**
   * @member {number} [responseTimeoutInSeconds] Response timeout in seconds.
   */
  responseTimeoutInSeconds?: number;
}

/**
 * @interface
 * An interface representing DigitalTwinGetInterfacesHeaders.
 * Defines headers for GetInterfaces operation.
 *
 */
export interface DigitalTwinGetInterfacesHeaders {
  /**
   * @member {string} [eTag] ETag of the digital twin.
   */
  eTag: string;
}

/**
 * @interface
 * An interface representing DigitalTwinUpdateInterfacesHeaders.
 * Defines headers for UpdateInterfaces operation.
 *
 */
export interface DigitalTwinUpdateInterfacesHeaders {
  /**
   * @member {string} [eTag] ETag of the digital twin.
   */
  eTag: string;
}

/**
 * @interface
 * An interface representing DigitalTwinGetInterfaceHeaders.
 * Defines headers for GetInterface operation.
 *
 */
export interface DigitalTwinGetInterfaceHeaders {
  /**
   * @member {string} [eTag] ETag of the digital twin.
   */
  eTag: string;
}

/**
 * @interface
 * An interface representing DigitalTwinGetDigitalTwinModelHeaders.
 * Defines headers for GetDigitalTwinModel operation.
 *
 */
export interface DigitalTwinGetDigitalTwinModelHeaders {
  /**
   * @member {string} [eTag] ETag of the digital twin.
   */
  eTag: string;
  /**
   * @member {string} [xMsModelId] Id of the model returned.
   */
  xMsModelId: string;
}

/**
 * @interface
 * An interface representing DigitalTwinInvokeInterfaceCommandHeaders.
 * Defines headers for InvokeInterfaceCommand operation.
 *
 */
export interface DigitalTwinInvokeInterfaceCommandHeaders {
  /**
   * @member {number} [xMsCommandStatuscode] Device Generated Status Code for
   * this Operation
   */
  xMsCommandStatuscode: number;
  /**
   * @member {string} [xMsRequestId] Server Generated Request Id (GUID), to
   * uniquely identify this request in the service
   */
  xMsRequestId: string;
}

/**
 * Defines values for Type.
 * Possible values include: 'sas', 'selfSigned', 'certificateAuthority', 'none'
 * @readonly
 * @enum {string}
 */
export type Type = 'sas' | 'selfSigned' | 'certificateAuthority' | 'none';

/**
 * Defines values for ConnectionState.
 * Possible values include: 'Disconnected', 'Connected'
 * @readonly
 * @enum {string}
 */
export type ConnectionState = 'Disconnected' | 'Connected';

/**
 * Defines values for Status.
 * Possible values include: 'enabled', 'disabled'
 * @readonly
 * @enum {string}
 */
export type Status = 'enabled' | 'disabled';

/**
 * Defines values for ImportMode.
 * Possible values include: 'createOrUpdate', 'create', 'update', 'updateIfMatchETag',
 * 'createOrUpdateIfMatchETag', 'delete', 'deleteIfMatchETag', 'updateTwin',
 * 'updateTwinIfMatchETag'
 * @readonly
 * @enum {string}
 */
export type ImportMode = 'createOrUpdate' | 'create' | 'update' | 'updateIfMatchETag' | 'createOrUpdateIfMatchETag' | 'delete' | 'deleteIfMatchETag' | 'updateTwin' | 'updateTwinIfMatchETag';

/**
 * Defines values for Status1.
 * Possible values include: 'enabled', 'disabled'
 * @readonly
 * @enum {string}
 */
export type Status1 = 'enabled' | 'disabled';

/**
 * Defines values for ErrorCode.
 * Possible values include: 'InvalidErrorCode', 'GenericBadRequest', 'InvalidProtocolVersion',
 * 'DeviceInvalidResultCount', 'InvalidOperation', 'ArgumentInvalid', 'ArgumentNull',
 * 'IotHubFormatError', 'DeviceStorageEntitySerializationError', 'BlobContainerValidationError',
 * 'ImportWarningExistsError', 'InvalidSchemaVersion', 'DeviceDefinedMultipleTimes',
 * 'DeserializationError', 'BulkRegistryOperationFailure', 'DefaultStorageEndpointNotConfigured',
 * 'InvalidFileUploadCorrelationId', 'ExpiredFileUploadCorrelationId', 'InvalidStorageEndpoint',
 * 'InvalidMessagingEndpoint', 'InvalidFileUploadCompletionStatus', 'InvalidStorageEndpointOrBlob',
 * 'RequestCanceled', 'InvalidStorageEndpointProperty', 'EtagDoesNotMatch', 'RequestTimedOut',
 * 'UnsupportedOperationOnReplica', 'NullMessage', 'ConnectionForcefullyClosedOnNewConnection',
 * 'InvalidDeviceScope', 'ConnectionForcefullyClosedOnFaultInjection',
 * 'ConnectionRejectedOnFaultInjection', 'InvalidRouteTestInput', 'InvalidSourceOnRoute',
 * 'RoutingNotEnabled', 'InvalidContentEncodingOrType', 'InvalidEndorsementKey',
 * 'InvalidRegistrationId', 'InvalidStorageRootKey', 'InvalidEnrollmentGroupId',
 * 'TooManyEnrollments', 'RegistrationIdDefinedMultipleTimes', 'CustomAllocationFailed',
 * 'CustomAllocationIotHubNotSpecified', 'CustomAllocationUnauthorizedAccess',
 * 'CannotRegisterModuleToModule', 'TenantHubRoutingNotEnabled',
 * 'InvalidConfigurationTargetCondition', 'InvalidConfigurationContent',
 * 'CannotModifyImmutableConfigurationContent', 'InvalidConfigurationCustomMetricsQuery',
 * 'InvalidPnPInterfaceDefinition', 'InvalidPnPDesiredProperties', 'InvalidPnPReportedProperties',
 * 'InvalidPnPWritableReportedProperties', 'GenericUnauthorized', 'IotHubNotFound',
 * 'IotHubUnauthorizedAccess', 'IotHubUnauthorized', 'ElasticPoolNotFound',
 * 'SystemModuleModifyUnauthorizedAccess', 'GenericForbidden', 'IotHubSuspended',
 * 'IotHubQuotaExceeded', 'JobQuotaExceeded', 'DeviceMaximumQueueDepthExceeded',
 * 'IotHubMaxCbsTokenExceeded', 'DeviceMaximumActiveFileUploadLimitExceeded',
 * 'DeviceMaximumQueueSizeExceeded', 'RoutingEndpointResponseForbidden',
 * 'InvalidMessageExpiryTime', 'OperationNotAvailableInCurrentTier',
 * 'DeviceModelMaxPropertiesExceeded', 'DeviceModelMaxIndexablePropertiesExceeded',
 * 'IotDpsSuspended', 'IotDpsSuspending', 'GenericNotFound', 'DeviceNotFound', 'JobNotFound',
 * 'QuotaMetricNotFound', 'SystemPropertyNotFound', 'AmqpAddressNotFound',
 * 'RoutingEndpointResponseNotFound', 'CertificateNotFound', 'ElasticPoolTenantHubNotFound',
 * 'ModuleNotFound', 'AzureTableStoreNotFound', 'IotHubFailingOver', 'FeatureNotSupported',
 * 'DigitalTwinInterfaceNotFound', 'QueryStoreClusterNotFound', 'DeviceNotOnline',
 * 'DeviceConnectionClosedRemotely', 'EnrollmentNotFound', 'DeviceRegistrationNotFound',
 * 'AsyncOperationNotFound', 'EnrollmentGroupNotFound', 'ConfigurationNotFound', 'GroupNotFound',
 * 'DigitalTwinModelNotFound', 'InterfaceNameModelNotFound', 'GenericMethodNotAllowed',
 * 'OperationNotAllowedInCurrentState', 'ImportDevicesNotSupported', 'BulkAddDevicesNotSupported',
 * 'GenericConflict', 'DeviceAlreadyExists', 'LinkCreationConflict',
 * 'CallbackSubscriptionConflict', 'ModelAlreadyExists', 'DeviceLocked', 'DeviceJobAlreadyExists',
 * 'JobAlreadyExists', 'EnrollmentConflict', 'EnrollmentGroupConflict',
 * 'RegistrationStatusConflict', 'ModuleAlreadyExistsOnDevice', 'ConfigurationAlreadyExists',
 * 'ApplyConfigurationAlreadyInProgressOnDevice', 'DigitalTwinModelAlreadyExists',
 * 'DigitalTwinModelExistsWithOtherModelType', 'InterfaceNameModelAlreadyExists',
 * 'GenericPreconditionFailed', 'PreconditionFailed', 'DeviceMessageLockLost',
 * 'JobRunPreconditionFailed', 'InflightMessagesInLink', 'GenericRequestEntityTooLarge',
 * 'MessageTooLarge', 'TooManyDevices', 'TooManyModulesOnDevice',
 * 'ConfigurationCountLimitExceeded', 'DigitalTwinModelCountLimitExceeded',
 * 'GenericUnsupportedMediaType', 'IncompatibleDataType', 'GenericTooManyRequests',
 * 'ThrottlingException', 'ThrottleBacklogLimitExceeded', 'ThrottlingBacklogTimeout',
 * 'ThrottlingMaxActiveJobCountExceeded', 'ClientClosedRequest', 'GenericServerError',
 * 'ServerError', 'JobCancelled', 'StatisticsRetrievalError', 'ConnectionForcefullyClosed',
 * 'InvalidBlobState', 'BackupTimedOut', 'AzureStorageTimeout', 'GenericTimeout',
 * 'InvalidThrottleParameter', 'EventHubLinkAlreadyClosed', 'ReliableBlobStoreError',
 * 'RetryAttemptsExhausted', 'AzureTableStoreError', 'CheckpointStoreNotFound',
 * 'DocumentDbInvalidReturnValue', 'ReliableDocDbStoreStoreError', 'ReliableBlobStoreTimeoutError',
 * 'ConfigReadFailed', 'InvalidContainerReceiveLink', 'InvalidPartitionEpoch', 'RestoreTimedOut',
 * 'StreamReservationFailure', 'UnexpectedPropertyValue', 'OrchestrationOperationFailed',
 * 'ModelRepoEndpointError', 'ResolutionError', 'GenericBadGateway',
 * 'InvalidResponseWhileProxying', 'GenericServiceUnavailable', 'ServiceUnavailable',
 * 'PartitionNotFound', 'IotHubActivationFailed', 'ServerBusy', 'IotHubRestoring',
 * 'ReceiveLinkOpensThrottled', 'ConnectionUnavailable', 'DeviceUnavailable',
 * 'ConfigurationNotAvailable', 'GroupNotAvailable', 'GenericGatewayTimeout', 'GatewayTimeout'
 * @readonly
 * @enum {string}
 */
export type ErrorCode = 'InvalidErrorCode' | 'GenericBadRequest' | 'InvalidProtocolVersion' | 'DeviceInvalidResultCount' | 'InvalidOperation' | 'ArgumentInvalid' | 'ArgumentNull' | 'IotHubFormatError' | 'DeviceStorageEntitySerializationError' | 'BlobContainerValidationError' | 'ImportWarningExistsError' | 'InvalidSchemaVersion' | 'DeviceDefinedMultipleTimes' | 'DeserializationError' | 'BulkRegistryOperationFailure' | 'DefaultStorageEndpointNotConfigured' | 'InvalidFileUploadCorrelationId' | 'ExpiredFileUploadCorrelationId' | 'InvalidStorageEndpoint' | 'InvalidMessagingEndpoint' | 'InvalidFileUploadCompletionStatus' | 'InvalidStorageEndpointOrBlob' | 'RequestCanceled' | 'InvalidStorageEndpointProperty' | 'EtagDoesNotMatch' | 'RequestTimedOut' | 'UnsupportedOperationOnReplica' | 'NullMessage' | 'ConnectionForcefullyClosedOnNewConnection' | 'InvalidDeviceScope' | 'ConnectionForcefullyClosedOnFaultInjection' | 'ConnectionRejectedOnFaultInjection' | 'InvalidRouteTestInput' | 'InvalidSourceOnRoute' | 'RoutingNotEnabled' | 'InvalidContentEncodingOrType' | 'InvalidEndorsementKey' | 'InvalidRegistrationId' | 'InvalidStorageRootKey' | 'InvalidEnrollmentGroupId' | 'TooManyEnrollments' | 'RegistrationIdDefinedMultipleTimes' | 'CustomAllocationFailed' | 'CustomAllocationIotHubNotSpecified' | 'CustomAllocationUnauthorizedAccess' | 'CannotRegisterModuleToModule' | 'TenantHubRoutingNotEnabled' | 'InvalidConfigurationTargetCondition' | 'InvalidConfigurationContent' | 'CannotModifyImmutableConfigurationContent' | 'InvalidConfigurationCustomMetricsQuery' | 'InvalidPnPInterfaceDefinition' | 'InvalidPnPDesiredProperties' | 'InvalidPnPReportedProperties' | 'InvalidPnPWritableReportedProperties' | 'GenericUnauthorized' | 'IotHubNotFound' | 'IotHubUnauthorizedAccess' | 'IotHubUnauthorized' | 'ElasticPoolNotFound' | 'SystemModuleModifyUnauthorizedAccess' | 'GenericForbidden' | 'IotHubSuspended' | 'IotHubQuotaExceeded' | 'JobQuotaExceeded' | 'DeviceMaximumQueueDepthExceeded' | 'IotHubMaxCbsTokenExceeded' | 'DeviceMaximumActiveFileUploadLimitExceeded' | 'DeviceMaximumQueueSizeExceeded' | 'RoutingEndpointResponseForbidden' | 'InvalidMessageExpiryTime' | 'OperationNotAvailableInCurrentTier' | 'DeviceModelMaxPropertiesExceeded' | 'DeviceModelMaxIndexablePropertiesExceeded' | 'IotDpsSuspended' | 'IotDpsSuspending' | 'GenericNotFound' | 'DeviceNotFound' | 'JobNotFound' | 'QuotaMetricNotFound' | 'SystemPropertyNotFound' | 'AmqpAddressNotFound' | 'RoutingEndpointResponseNotFound' | 'CertificateNotFound' | 'ElasticPoolTenantHubNotFound' | 'ModuleNotFound' | 'AzureTableStoreNotFound' | 'IotHubFailingOver' | 'FeatureNotSupported' | 'DigitalTwinInterfaceNotFound' | 'QueryStoreClusterNotFound' | 'DeviceNotOnline' | 'DeviceConnectionClosedRemotely' | 'EnrollmentNotFound' | 'DeviceRegistrationNotFound' | 'AsyncOperationNotFound' | 'EnrollmentGroupNotFound' | 'ConfigurationNotFound' | 'GroupNotFound' | 'DigitalTwinModelNotFound' | 'InterfaceNameModelNotFound' | 'GenericMethodNotAllowed' | 'OperationNotAllowedInCurrentState' | 'ImportDevicesNotSupported' | 'BulkAddDevicesNotSupported' | 'GenericConflict' | 'DeviceAlreadyExists' | 'LinkCreationConflict' | 'CallbackSubscriptionConflict' | 'ModelAlreadyExists' | 'DeviceLocked' | 'DeviceJobAlreadyExists' | 'JobAlreadyExists' | 'EnrollmentConflict' | 'EnrollmentGroupConflict' | 'RegistrationStatusConflict' | 'ModuleAlreadyExistsOnDevice' | 'ConfigurationAlreadyExists' | 'ApplyConfigurationAlreadyInProgressOnDevice' | 'DigitalTwinModelAlreadyExists' | 'DigitalTwinModelExistsWithOtherModelType' | 'InterfaceNameModelAlreadyExists' | 'GenericPreconditionFailed' | 'PreconditionFailed' | 'DeviceMessageLockLost' | 'JobRunPreconditionFailed' | 'InflightMessagesInLink' | 'GenericRequestEntityTooLarge' | 'MessageTooLarge' | 'TooManyDevices' | 'TooManyModulesOnDevice' | 'ConfigurationCountLimitExceeded' | 'DigitalTwinModelCountLimitExceeded' | 'GenericUnsupportedMediaType' | 'IncompatibleDataType' | 'GenericTooManyRequests' | 'ThrottlingException' | 'ThrottleBacklogLimitExceeded' | 'ThrottlingBacklogTimeout' | 'ThrottlingMaxActiveJobCountExceeded' | 'ClientClosedRequest' | 'GenericServerError' | 'ServerError' | 'JobCancelled' | 'StatisticsRetrievalError' | 'ConnectionForcefullyClosed' | 'InvalidBlobState' | 'BackupTimedOut' | 'AzureStorageTimeout' | 'GenericTimeout' | 'InvalidThrottleParameter' | 'EventHubLinkAlreadyClosed' | 'ReliableBlobStoreError' | 'RetryAttemptsExhausted' | 'AzureTableStoreError' | 'CheckpointStoreNotFound' | 'DocumentDbInvalidReturnValue' | 'ReliableDocDbStoreStoreError' | 'ReliableBlobStoreTimeoutError' | 'ConfigReadFailed' | 'InvalidContainerReceiveLink' | 'InvalidPartitionEpoch' | 'RestoreTimedOut' | 'StreamReservationFailure' | 'UnexpectedPropertyValue' | 'OrchestrationOperationFailed' | 'ModelRepoEndpointError' | 'ResolutionError' | 'GenericBadGateway' | 'InvalidResponseWhileProxying' | 'GenericServiceUnavailable' | 'ServiceUnavailable' | 'PartitionNotFound' | 'IotHubActivationFailed' | 'ServerBusy' | 'IotHubRestoring' | 'ReceiveLinkOpensThrottled' | 'ConnectionUnavailable' | 'DeviceUnavailable' | 'ConfigurationNotAvailable' | 'GroupNotAvailable' | 'GenericGatewayTimeout' | 'GatewayTimeout';

/**
 * Defines values for WarningCode.
 * Possible values include: 'DeviceRegisteredWithoutTwin'
 * @readonly
 * @enum {string}
 */
export type WarningCode = 'DeviceRegisteredWithoutTwin';

/**
 * Defines values for Type1.
 * Possible values include: 'unknown', 'twin', 'deviceJob', 'jobResponse', 'raw', 'enrollment',
 * 'enrollmentGroup', 'deviceRegistration'
 * @readonly
 * @enum {string}
 */
export type Type1 = 'unknown' | 'twin' | 'deviceJob' | 'jobResponse' | 'raw' | 'enrollment' | 'enrollmentGroup' | 'deviceRegistration';

/**
 * Defines values for Type2.
 * Possible values include: 'unknown', 'export', 'import', 'backup', 'readDeviceProperties',
 * 'writeDeviceProperties', 'updateDeviceConfiguration', 'rebootDevice', 'factoryResetDevice',
 * 'firmwareUpdate', 'scheduleDeviceMethod', 'scheduleUpdateTwin', 'restoreFromBackup',
 * 'failoverDataCopy'
 * @readonly
 * @enum {string}
 */
export type Type2 = 'unknown' | 'export' | 'import' | 'backup' | 'readDeviceProperties' | 'writeDeviceProperties' | 'updateDeviceConfiguration' | 'rebootDevice' | 'factoryResetDevice' | 'firmwareUpdate' | 'scheduleDeviceMethod' | 'scheduleUpdateTwin' | 'restoreFromBackup' | 'failoverDataCopy';

/**
 * Defines values for Status2.
 * Possible values include: 'unknown', 'enqueued', 'running', 'completed', 'failed', 'cancelled',
 * 'scheduled', 'queued'
 * @readonly
 * @enum {string}
 */
export type Status2 = 'unknown' | 'enqueued' | 'running' | 'completed' | 'failed' | 'cancelled' | 'scheduled' | 'queued';

/**
 * Defines values for Action.
 * Possible values include: 'None', 'CloseAll', 'Periodic'
 * @readonly
 * @enum {string}
 */
export type Action = 'None' | 'CloseAll' | 'Periodic';

/**
 * Defines values for Status3.
 * Possible values include: 'enabled', 'disabled'
 * @readonly
 * @enum {string}
 */
export type Status3 = 'enabled' | 'disabled';

/**
 * Defines values for ConnectionState1.
 * Possible values include: 'Disconnected', 'Connected'
 * @readonly
 * @enum {string}
 */
export type ConnectionState1 = 'Disconnected' | 'Connected';

/**
 * Defines values for AuthenticationType.
 * Possible values include: 'sas', 'selfSigned', 'certificateAuthority', 'none'
 * @readonly
 * @enum {string}
 */
export type AuthenticationType = 'sas' | 'selfSigned' | 'certificateAuthority' | 'none';

/**
 * Defines values for Type3.
 * Possible values include: 'unknown', 'export', 'import', 'backup', 'readDeviceProperties',
 * 'writeDeviceProperties', 'updateDeviceConfiguration', 'rebootDevice', 'factoryResetDevice',
 * 'firmwareUpdate', 'scheduleDeviceMethod', 'scheduleUpdateTwin', 'restoreFromBackup',
 * 'failoverDataCopy'
 * @readonly
 * @enum {string}
 */
export type Type3 = 'unknown' | 'export' | 'import' | 'backup' | 'readDeviceProperties' | 'writeDeviceProperties' | 'updateDeviceConfiguration' | 'rebootDevice' | 'factoryResetDevice' | 'firmwareUpdate' | 'scheduleDeviceMethod' | 'scheduleUpdateTwin' | 'restoreFromBackup' | 'failoverDataCopy';

/**
 * Defines values for Type4.
 * Possible values include: 'unknown', 'export', 'import', 'backup', 'readDeviceProperties',
 * 'writeDeviceProperties', 'updateDeviceConfiguration', 'rebootDevice', 'factoryResetDevice',
 * 'firmwareUpdate', 'scheduleDeviceMethod', 'scheduleUpdateTwin', 'restoreFromBackup',
 * 'failoverDataCopy'
 * @readonly
 * @enum {string}
 */
export type Type4 = 'unknown' | 'export' | 'import' | 'backup' | 'readDeviceProperties' | 'writeDeviceProperties' | 'updateDeviceConfiguration' | 'rebootDevice' | 'factoryResetDevice' | 'firmwareUpdate' | 'scheduleDeviceMethod' | 'scheduleUpdateTwin' | 'restoreFromBackup' | 'failoverDataCopy';

/**
 * Defines values for Status4.
 * Possible values include: 'unknown', 'enqueued', 'running', 'completed', 'failed', 'cancelled',
 * 'scheduled', 'queued'
 * @readonly
 * @enum {string}
 */
export type Status4 = 'unknown' | 'enqueued' | 'running' | 'completed' | 'failed' | 'cancelled' | 'scheduled' | 'queued';

/**
 * Defines values for ConnectionState2.
 * Possible values include: 'Disconnected', 'Connected'
 * @readonly
 * @enum {string}
 */
export type ConnectionState2 = 'Disconnected' | 'Connected';

/**
 * Contains response data for the getConfiguration operation.
 */
export type ServiceGetConfigurationResponse = Configuration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Configuration;
    };
};

/**
 * Contains response data for the createOrUpdateConfiguration operation.
 */
export type ServiceCreateOrUpdateConfigurationResponse = Configuration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Configuration;
    };
};

/**
 * Contains response data for the getConfigurations operation.
 */
export type ServiceGetConfigurationsResponse = Array<Configuration> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Configuration[];
    };
};

/**
 * Contains response data for the testConfigurationQueries operation.
 */
export type ServiceTestConfigurationQueriesResponse = ConfigurationQueriesTestResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConfigurationQueriesTestResponse;
    };
};

/**
 * Contains response data for the getDeviceRegistryStatistics operation.
 */
export type ServiceGetDeviceRegistryStatisticsResponse = RegistryStatistics & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RegistryStatistics;
    };
};

/**
 * Contains response data for the getServiceStatistics operation.
 */
export type ServiceGetServiceStatisticsResponse = ServiceStatistics & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceStatistics;
    };
};

/**
 * Contains response data for the getDevices operation.
 */
export type ServiceGetDevicesResponse = Array<Device> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Device[];
    };
};

/**
 * Contains response data for the bulkCreateOrUpdateDevices operation.
 */
export type ServiceBulkCreateOrUpdateDevicesResponse = BulkRegistryOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BulkRegistryOperationResult;
    };
};

/**
 * Contains response data for the queryIotHub operation.
 */
export type ServiceQueryIotHubResponse = QueryResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: QueryResult;
    };
};

/**
 * Contains response data for the getDevice operation.
 */
export type ServiceGetDeviceResponse = Device & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Device;
    };
};

/**
 * Contains response data for the createOrUpdateDevice operation.
 */
export type ServiceCreateOrUpdateDeviceResponse = Device & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Device;
    };
};

/**
 * Contains response data for the applyConfigurationOnEdgeDevice operation.
 */
export type ServiceApplyConfigurationOnEdgeDeviceResponse = {
  /**
   * The parsed response body.
   */
  body: any;
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: any;
    };
};

/**
 * Contains response data for the createImportExportJob operation.
 */
export type ServiceCreateImportExportJobResponse = JobProperties & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: JobProperties;
    };
};

/**
 * Contains response data for the getImportExportJobs operation.
 */
export type ServiceGetImportExportJobsResponse = Array<JobProperties> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: JobProperties[];
    };
};

/**
 * Contains response data for the getImportExportJob operation.
 */
export type ServiceGetImportExportJobResponse = JobProperties & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: JobProperties;
    };
};

/**
 * Contains response data for the cancelImportExportJob operation.
 */
export type ServiceCancelImportExportJobResponse = {
  /**
   * The parsed response body.
   */
  body: any;
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: any;
    };
};

/**
 * Contains response data for the purgeCommandQueue operation.
 */
export type ServicePurgeCommandQueueResponse = PurgeMessageQueueResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PurgeMessageQueueResult;
    };
};

/**
 * Contains response data for the getFaultInjection operation.
 */
export type ServiceGetFaultInjectionResponse = FaultInjectionProperties & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FaultInjectionProperties;
    };
};

/**
 * Contains response data for the getTwin operation.
 */
export type ServiceGetTwinResponse = Twin & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Twin;
    };
};

/**
 * Contains response data for the replaceTwin operation.
 */
export type ServiceReplaceTwinResponse = Twin & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Twin;
    };
};

/**
 * Contains response data for the updateTwin operation.
 */
export type ServiceUpdateTwinResponse = Twin & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Twin;
    };
};

/**
 * Contains response data for the getModuleTwin operation.
 */
export type ServiceGetModuleTwinResponse = Twin & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Twin;
    };
};

/**
 * Contains response data for the replaceModuleTwin operation.
 */
export type ServiceReplaceModuleTwinResponse = Twin & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Twin;
    };
};

/**
 * Contains response data for the updateModuleTwin operation.
 */
export type ServiceUpdateModuleTwinResponse = Twin & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Twin;
    };
};

/**
 * Contains response data for the getJob operation.
 */
export type ServiceGetJobResponse = JobResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: JobResponse;
    };
};

/**
 * Contains response data for the createJob operation.
 */
export type ServiceCreateJobResponse = JobResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: JobResponse;
    };
};

/**
 * Contains response data for the cancelJob operation.
 */
export type ServiceCancelJobResponse = JobResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: JobResponse;
    };
};

/**
 * Contains response data for the queryJobs operation.
 */
export type ServiceQueryJobsResponse = QueryResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: QueryResult;
    };
};

/**
 * Contains response data for the getModulesOnDevice operation.
 */
export type ServiceGetModulesOnDeviceResponse = Array<Module> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Module[];
    };
};

/**
 * Contains response data for the getModule operation.
 */
export type ServiceGetModuleResponse = Module & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Module;
    };
};

/**
 * Contains response data for the createOrUpdateModule operation.
 */
export type ServiceCreateOrUpdateModuleResponse = Module & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Module;
    };
};

/**
 * Contains response data for the invokeDeviceMethod operation.
 */
export type ServiceInvokeDeviceMethodResponse = CloudToDeviceMethodResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudToDeviceMethodResult;
    };
};

/**
 * Contains response data for the invokeDeviceModuleMethod operation.
 */
export type ServiceInvokeDeviceModuleMethodResponse = CloudToDeviceMethodResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudToDeviceMethodResult;
    };
};

/**
 * Contains response data for the getInterfaces operation.
 */
export type DigitalTwinGetInterfacesResponse = DigitalTwinInterfaces & DigitalTwinGetInterfacesHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: DigitalTwinGetInterfacesHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DigitalTwinInterfaces;
    };
};

/**
 * Contains response data for the updateInterfaces operation.
 */
export type DigitalTwinUpdateInterfacesResponse = DigitalTwinInterfaces & DigitalTwinUpdateInterfacesHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: DigitalTwinUpdateInterfacesHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DigitalTwinInterfaces;
    };
};

/**
 * Contains response data for the getInterface operation.
 */
export type DigitalTwinGetInterfaceResponse = DigitalTwinInterfaces & DigitalTwinGetInterfaceHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: DigitalTwinGetInterfaceHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DigitalTwinInterfaces;
    };
};

/**
 * Contains response data for the getDigitalTwinModel operation.
 */
export type DigitalTwinGetDigitalTwinModelResponse = DigitalTwinGetDigitalTwinModelHeaders & {
  /**
   * The parsed response body.
   */
  body: any;
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: DigitalTwinGetDigitalTwinModelHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: any;
    };
};

/**
 * Contains response data for the invokeInterfaceCommand operation.
 */
export type DigitalTwinInvokeInterfaceCommandResponse = DigitalTwinInvokeInterfaceCommandHeaders & {
  /**
   * The parsed response body.
   */
  body: any;
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: DigitalTwinInvokeInterfaceCommandHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: any;
    };
};
