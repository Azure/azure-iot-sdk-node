/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ServiceClientOptions } from "@azure/ms-rest-js";
import * as msRest from "@azure/ms-rest-js";

/**
 * Base class for serializable value of indetermined type.
 */
export interface VariantValue {
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly objectValue?: any;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isNull?: boolean;
}

/**
 * An interface representing PatchOperation.
 */
export interface PatchOperation {
  /**
   * Json patch "op" memeber,represents operations such as "add", "remove", "replace". Possible
   * values include: 'add', 'replace', 'remove'
   */
  op?: Op;
  /**
   * Json patch "path" member.
   */
  path?: string;
  /**
   * Json patch "value" member.
   */
  value?: VariantValue;
  /**
   * Json patch "from" member.
   */
  from?: string;
}

/**
 * An interface representing DigitalTwinPatch.
 */
export interface DigitalTwinPatch {
  /**
   * List of digital twin json-patch operations.
   */
  operations?: PatchOperation[];
}

/**
 * An interface representing IotHubGatewayServiceAPIsOptions.
 */
export interface IotHubGatewayServiceAPIsOptions extends ServiceClientOptions {
  /**
   * Version of the Api. Default value: '2020-05-31-preview'.
   */
  apiVersion?: string;
  baseUri?: string;
}

/**
 * Optional Parameters.
 */
export interface DigitalTwinUpdateDigitalTwinOptionalParams extends msRest.RequestOptionsBase {
  ifMatch?: string;
}

/**
 * Optional Parameters.
 */
export interface DigitalTwinInvokeComponentCommandOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Connect timeout in seconds.
   */
  connectTimeoutInSeconds?: number;
  /**
   * Response timeout in seconds.
   */
  responseTimeoutInSeconds?: number;
}

/**
 * Defines headers for InvokeComponentCommand operation.
 */
export interface DigitalTwinInvokeComponentCommandHeaders {
  /**
   * Device Generated Status Code for this Operation
   */
  xMsCommandStatuscode: number;
  /**
   * Server Generated Request Id (GUID), to uniquely identify this request in the service
   */
  xMsRequestId: string;
}

/**
 * Defines values for Op.
 * Possible values include: 'add', 'replace', 'remove'
 * @readonly
 * @enum {string}
 */
export type Op = 'add' | 'replace' | 'remove';

/**
 * Contains response data for the getDigitalTwin operation.
 */
export type DigitalTwinGetDigitalTwinResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: any;
    };
};

/**
 * Contains response data for the updateDigitalTwin operation.
 */
export type DigitalTwinUpdateDigitalTwinResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: any;
    };
};

/**
 * Contains response data for the invokeComponentCommand operation.
 */
export type DigitalTwinInvokeComponentCommandResponse = DigitalTwinInvokeComponentCommandHeaders & {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: DigitalTwinInvokeComponentCommandHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: any;
    };
};
