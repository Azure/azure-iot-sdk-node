/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/deviceMethodMappers";
import * as Parameters from "../models/parameters";
import { IotHubGatewayServiceAPIsContext } from "../iotHubGatewayServiceAPIsContext";

/** Class representing a DeviceMethod. */
export class DeviceMethod {
  private readonly client: IotHubGatewayServiceAPIsContext;

  /**
   * Create a DeviceMethod.
   * @param {IotHubGatewayServiceAPIsContext} client Reference to the service client.
   */
  constructor(client: IotHubGatewayServiceAPIsContext) {
    this.client = client;
  }

  /**
   * Invoke a direct method on a device. See
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-direct-methods for more information.
   * @summary Invoke a direct method on a device.
   * @param deviceId
   * @param directMethodRequest
   * @param [options] The optional parameters
   * @returns Promise<Models.DeviceMethodInvokeDeviceMethodResponse>
   */
  invokeDeviceMethod(deviceId: string, directMethodRequest: Models.CloudToDeviceMethod, options?: msRest.RequestOptionsBase): Promise<Models.DeviceMethodInvokeDeviceMethodResponse>;
  /**
   * @param deviceId
   * @param directMethodRequest
   * @param callback The callback
   */
  invokeDeviceMethod(deviceId: string, directMethodRequest: Models.CloudToDeviceMethod, callback: msRest.ServiceCallback<Models.CloudToDeviceMethodResult>): void;
  /**
   * @param deviceId
   * @param directMethodRequest
   * @param options The optional parameters
   * @param callback The callback
   */
  invokeDeviceMethod(deviceId: string, directMethodRequest: Models.CloudToDeviceMethod, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CloudToDeviceMethodResult>): void;
  invokeDeviceMethod(deviceId: string, directMethodRequest: Models.CloudToDeviceMethod, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CloudToDeviceMethodResult>, callback?: msRest.ServiceCallback<Models.CloudToDeviceMethodResult>): Promise<Models.DeviceMethodInvokeDeviceMethodResponse> {
    return this.client.sendOperationRequest(
      {
        deviceId,
        directMethodRequest,
        options
      },
      invokeDeviceMethodOperationSpec,
      callback) as Promise<Models.DeviceMethodInvokeDeviceMethodResponse>;
  }

  /**
   * Invoke a direct method on a module of a device. See
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-direct-methods for more information
   * @summary Invoke a direct method on a module of a device.
   * @param deviceId
   * @param moduleId
   * @param directMethodRequest
   * @param [options] The optional parameters
   * @returns Promise<Models.DeviceMethodInvokeModuleMethodResponse>
   */
  invokeModuleMethod(deviceId: string, moduleId: string, directMethodRequest: Models.CloudToDeviceMethod, options?: msRest.RequestOptionsBase): Promise<Models.DeviceMethodInvokeModuleMethodResponse>;
  /**
   * @param deviceId
   * @param moduleId
   * @param directMethodRequest
   * @param callback The callback
   */
  invokeModuleMethod(deviceId: string, moduleId: string, directMethodRequest: Models.CloudToDeviceMethod, callback: msRest.ServiceCallback<Models.CloudToDeviceMethodResult>): void;
  /**
   * @param deviceId
   * @param moduleId
   * @param directMethodRequest
   * @param options The optional parameters
   * @param callback The callback
   */
  invokeModuleMethod(deviceId: string, moduleId: string, directMethodRequest: Models.CloudToDeviceMethod, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CloudToDeviceMethodResult>): void;
  invokeModuleMethod(deviceId: string, moduleId: string, directMethodRequest: Models.CloudToDeviceMethod, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CloudToDeviceMethodResult>, callback?: msRest.ServiceCallback<Models.CloudToDeviceMethodResult>): Promise<Models.DeviceMethodInvokeModuleMethodResponse> {
    return this.client.sendOperationRequest(
      {
        deviceId,
        moduleId,
        directMethodRequest,
        options
      },
      invokeModuleMethodOperationSpec,
      callback) as Promise<Models.DeviceMethodInvokeModuleMethodResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const invokeDeviceMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "twins/{deviceId}/methods",
  urlParameters: [
    Parameters.deviceId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: "directMethodRequest",
    mapper: {
      ...Mappers.CloudToDeviceMethod,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CloudToDeviceMethodResult
    },
    default: {}
  },
  serializer
};

const invokeModuleMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "twins/{deviceId}/modules/{moduleId}/methods",
  urlParameters: [
    Parameters.deviceId,
    Parameters.moduleId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: "directMethodRequest",
    mapper: {
      ...Mappers.CloudToDeviceMethod,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CloudToDeviceMethodResult
    },
    default: {}
  },
  serializer
};
