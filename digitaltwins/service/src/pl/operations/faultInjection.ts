/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/faultInjectionMappers";
import * as Parameters from "../models/parameters";
import { IotHubGatewayServiceAPIsContext } from "../iotHubGatewayServiceAPIsContext";

/** Class representing a FaultInjection. */
export class FaultInjection {
  private readonly client: IotHubGatewayServiceAPIsContext;

  /**
   * Create a FaultInjection.
   * @param {IotHubGatewayServiceAPIsContext} client Reference to the service client.
   */
  constructor(client: IotHubGatewayServiceAPIsContext) {
    this.client = client;
  }

  /**
   * @summary Get FaultInjection entity
   * @param [options] The optional parameters
   * @returns Promise<Models.FaultInjectionGetResponse>
   */
  get(options?: msRest.RequestOptionsBase): Promise<Models.FaultInjectionGetResponse>;
  /**
   * @param callback The callback
   */
  get(callback: msRest.ServiceCallback<Models.FaultInjectionProperties>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FaultInjectionProperties>): void;
  get(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FaultInjectionProperties>, callback?: msRest.ServiceCallback<Models.FaultInjectionProperties>): Promise<Models.FaultInjectionGetResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getOperationSpec,
      callback) as Promise<Models.FaultInjectionGetResponse>;
  }

  /**
   * @summary Create or update FaultInjection entity
   * @param value
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  set(value: Models.FaultInjectionProperties, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param value
   * @param callback The callback
   */
  set(value: Models.FaultInjectionProperties, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param value
   * @param options The optional parameters
   * @param callback The callback
   */
  set(value: Models.FaultInjectionProperties, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  set(value: Models.FaultInjectionProperties, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        value,
        options
      },
      setOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "faultInjection",
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FaultInjectionProperties
    },
    default: {}
  },
  serializer
};

const setOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "faultInjection",
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: "value",
    mapper: {
      ...Mappers.FaultInjectionProperties,
      required: true
    }
  },
  responses: {
    200: {},
    default: {}
  },
  serializer
};
