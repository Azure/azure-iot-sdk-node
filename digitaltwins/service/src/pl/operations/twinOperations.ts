/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/twinOperationsMappers";
import * as Parameters from "../models/parameters";
import { IotHubGatewayServiceAPIsContext } from "../iotHubGatewayServiceAPIsContext";

/** Class representing a TwinOperations. */
export class TwinOperations {
  private readonly client: IotHubGatewayServiceAPIsContext;

  /**
   * Create a TwinOperations.
   * @param {IotHubGatewayServiceAPIsContext} client Reference to the service client.
   */
  constructor(client: IotHubGatewayServiceAPIsContext) {
    this.client = client;
  }

  /**
   * Gets a device twin. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins
   * for more information.
   * @summary Gets a device twin.
   * @param id Device ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.TwinGetDeviceTwinResponse>
   */
  getDeviceTwin(id: string, options?: msRest.RequestOptionsBase): Promise<Models.TwinGetDeviceTwinResponse>;
  /**
   * @param id Device ID.
   * @param callback The callback
   */
  getDeviceTwin(id: string, callback: msRest.ServiceCallback<Models.Twin>): void;
  /**
   * @param id Device ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeviceTwin(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Twin>): void;
  getDeviceTwin(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Twin>, callback?: msRest.ServiceCallback<Models.Twin>): Promise<Models.TwinGetDeviceTwinResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getDeviceTwinOperationSpec,
      callback) as Promise<Models.TwinGetDeviceTwinResponse>;
  }

  /**
   * Replaces a device twin. See
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information.
   * @summary Replaces tags and desired properties of a device twin.
   * @param id Device ID.
   * @param deviceTwinInfo Device twin info
   * @param [options] The optional parameters
   * @returns Promise<Models.TwinReplaceDeviceTwinResponse>
   */
  replaceDeviceTwin(id: string, deviceTwinInfo: Models.Twin, options?: Models.TwinReplaceDeviceTwinOptionalParams): Promise<Models.TwinReplaceDeviceTwinResponse>;
  /**
   * @param id Device ID.
   * @param deviceTwinInfo Device twin info
   * @param callback The callback
   */
  replaceDeviceTwin(id: string, deviceTwinInfo: Models.Twin, callback: msRest.ServiceCallback<Models.Twin>): void;
  /**
   * @param id Device ID.
   * @param deviceTwinInfo Device twin info
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceDeviceTwin(id: string, deviceTwinInfo: Models.Twin, options: Models.TwinReplaceDeviceTwinOptionalParams, callback: msRest.ServiceCallback<Models.Twin>): void;
  replaceDeviceTwin(id: string, deviceTwinInfo: Models.Twin, options?: Models.TwinReplaceDeviceTwinOptionalParams | msRest.ServiceCallback<Models.Twin>, callback?: msRest.ServiceCallback<Models.Twin>): Promise<Models.TwinReplaceDeviceTwinResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        deviceTwinInfo,
        options
      },
      replaceDeviceTwinOperationSpec,
      callback) as Promise<Models.TwinReplaceDeviceTwinResponse>;
  }

  /**
   * Updates a device twin. See
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information.
   * @summary Updates tags and desired properties of a device twin.
   * @param id Device ID.
   * @param deviceTwinInfo Device twin info
   * @param [options] The optional parameters
   * @returns Promise<Models.TwinUpdateDeviceTwinResponse>
   */
  updateDeviceTwin(id: string, deviceTwinInfo: Models.Twin, options?: Models.TwinUpdateDeviceTwinOptionalParams): Promise<Models.TwinUpdateDeviceTwinResponse>;
  /**
   * @param id Device ID.
   * @param deviceTwinInfo Device twin info
   * @param callback The callback
   */
  updateDeviceTwin(id: string, deviceTwinInfo: Models.Twin, callback: msRest.ServiceCallback<Models.Twin>): void;
  /**
   * @param id Device ID.
   * @param deviceTwinInfo Device twin info
   * @param options The optional parameters
   * @param callback The callback
   */
  updateDeviceTwin(id: string, deviceTwinInfo: Models.Twin, options: Models.TwinUpdateDeviceTwinOptionalParams, callback: msRest.ServiceCallback<Models.Twin>): void;
  updateDeviceTwin(id: string, deviceTwinInfo: Models.Twin, options?: Models.TwinUpdateDeviceTwinOptionalParams | msRest.ServiceCallback<Models.Twin>, callback?: msRest.ServiceCallback<Models.Twin>): Promise<Models.TwinUpdateDeviceTwinResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        deviceTwinInfo,
        options
      },
      updateDeviceTwinOperationSpec,
      callback) as Promise<Models.TwinUpdateDeviceTwinResponse>;
  }

  /**
   * Gets a module twin. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins
   * for more information.
   * @summary Gets a module twin.
   * @param id Device ID.
   * @param mid Module ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.TwinGetModuleTwinResponse>
   */
  getModuleTwin(id: string, mid: string, options?: msRest.RequestOptionsBase): Promise<Models.TwinGetModuleTwinResponse>;
  /**
   * @param id Device ID.
   * @param mid Module ID.
   * @param callback The callback
   */
  getModuleTwin(id: string, mid: string, callback: msRest.ServiceCallback<Models.Twin>): void;
  /**
   * @param id Device ID.
   * @param mid Module ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getModuleTwin(id: string, mid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Twin>): void;
  getModuleTwin(id: string, mid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Twin>, callback?: msRest.ServiceCallback<Models.Twin>): Promise<Models.TwinGetModuleTwinResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        mid,
        options
      },
      getModuleTwinOperationSpec,
      callback) as Promise<Models.TwinGetModuleTwinResponse>;
  }

  /**
   * Replaces a module twin. See
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information.
   * @summary Replaces tags and desired properties of a module twin.
   * @param id Device ID.
   * @param mid Module ID.
   * @param deviceTwinInfo Device twin info
   * @param [options] The optional parameters
   * @returns Promise<Models.TwinReplaceModuleTwinResponse>
   */
  replaceModuleTwin(id: string, mid: string, deviceTwinInfo: Models.Twin, options?: Models.TwinReplaceModuleTwinOptionalParams): Promise<Models.TwinReplaceModuleTwinResponse>;
  /**
   * @param id Device ID.
   * @param mid Module ID.
   * @param deviceTwinInfo Device twin info
   * @param callback The callback
   */
  replaceModuleTwin(id: string, mid: string, deviceTwinInfo: Models.Twin, callback: msRest.ServiceCallback<Models.Twin>): void;
  /**
   * @param id Device ID.
   * @param mid Module ID.
   * @param deviceTwinInfo Device twin info
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceModuleTwin(id: string, mid: string, deviceTwinInfo: Models.Twin, options: Models.TwinReplaceModuleTwinOptionalParams, callback: msRest.ServiceCallback<Models.Twin>): void;
  replaceModuleTwin(id: string, mid: string, deviceTwinInfo: Models.Twin, options?: Models.TwinReplaceModuleTwinOptionalParams | msRest.ServiceCallback<Models.Twin>, callback?: msRest.ServiceCallback<Models.Twin>): Promise<Models.TwinReplaceModuleTwinResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        mid,
        deviceTwinInfo,
        options
      },
      replaceModuleTwinOperationSpec,
      callback) as Promise<Models.TwinReplaceModuleTwinResponse>;
  }

  /**
   * Updates a module twin. See
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information.
   * @summary Updates tags and desired properties of a module twin.
   * @param id Device ID.
   * @param mid Module ID.
   * @param deviceTwinInfo Device twin information
   * @param [options] The optional parameters
   * @returns Promise<Models.TwinUpdateModuleTwinResponse>
   */
  updateModuleTwin(id: string, mid: string, deviceTwinInfo: Models.Twin, options?: Models.TwinUpdateModuleTwinOptionalParams): Promise<Models.TwinUpdateModuleTwinResponse>;
  /**
   * @param id Device ID.
   * @param mid Module ID.
   * @param deviceTwinInfo Device twin information
   * @param callback The callback
   */
  updateModuleTwin(id: string, mid: string, deviceTwinInfo: Models.Twin, callback: msRest.ServiceCallback<Models.Twin>): void;
  /**
   * @param id Device ID.
   * @param mid Module ID.
   * @param deviceTwinInfo Device twin information
   * @param options The optional parameters
   * @param callback The callback
   */
  updateModuleTwin(id: string, mid: string, deviceTwinInfo: Models.Twin, options: Models.TwinUpdateModuleTwinOptionalParams, callback: msRest.ServiceCallback<Models.Twin>): void;
  updateModuleTwin(id: string, mid: string, deviceTwinInfo: Models.Twin, options?: Models.TwinUpdateModuleTwinOptionalParams | msRest.ServiceCallback<Models.Twin>, callback?: msRest.ServiceCallback<Models.Twin>): Promise<Models.TwinUpdateModuleTwinResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        mid,
        deviceTwinInfo,
        options
      },
      updateModuleTwinOperationSpec,
      callback) as Promise<Models.TwinUpdateModuleTwinResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getDeviceTwinOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "twins/{id}",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Twin
    },
    default: {}
  },
  serializer
};

const replaceDeviceTwinOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "twins/{id}",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch
  ],
  requestBody: {
    parameterPath: "deviceTwinInfo",
    mapper: {
      ...Mappers.Twin,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Twin
    },
    default: {}
  },
  serializer
};

const updateDeviceTwinOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "twins/{id}",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch
  ],
  requestBody: {
    parameterPath: "deviceTwinInfo",
    mapper: {
      ...Mappers.Twin,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Twin
    },
    default: {}
  },
  serializer
};

const getModuleTwinOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "twins/{id}/modules/{mid}",
  urlParameters: [
    Parameters.id,
    Parameters.mid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Twin
    },
    default: {}
  },
  serializer
};

const replaceModuleTwinOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "twins/{id}/modules/{mid}",
  urlParameters: [
    Parameters.id,
    Parameters.mid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch
  ],
  requestBody: {
    parameterPath: "deviceTwinInfo",
    mapper: {
      ...Mappers.Twin,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Twin
    },
    default: {}
  },
  serializer
};

const updateModuleTwinOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "twins/{id}/modules/{mid}",
  urlParameters: [
    Parameters.id,
    Parameters.mid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch
  ],
  requestBody: {
    parameterPath: "deviceTwinInfo",
    mapper: {
      ...Mappers.Twin,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Twin
    },
    default: {}
  },
  serializer
};
