/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/serviceMappers";
import * as Parameters from "../models/parameters";
import { IotHubGatewayServiceAPIs20190701PreviewContext } from "../iotHubGatewayServiceAPIs20190701PreviewContext";

/** Class representing a Service. */
export class Service {
  private readonly client: IotHubGatewayServiceAPIs20190701PreviewContext;

  /**
   * Create a Service.
   * @param {IotHubGatewayServiceAPIs20190701PreviewContext} client Reference to the service client.
   */
  constructor(client: IotHubGatewayServiceAPIs20190701PreviewContext) {
    this.client = client;
  }

  /**
   * @summary Retrieve a configuration for Iot Hub devices and modules by it identifier.
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceGetConfigurationResponse>
   */
  getConfiguration(id: string, options?: msRest.RequestOptionsBase): Promise<Models.ServiceGetConfigurationResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  getConfiguration(id: string, callback: msRest.ServiceCallback<Models.Configuration>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getConfiguration(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Configuration>): void;
  getConfiguration(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Configuration>, callback?: msRest.ServiceCallback<Models.Configuration>): Promise<Models.ServiceGetConfigurationResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getConfigurationOperationSpec,
      callback) as Promise<Models.ServiceGetConfigurationResponse>;
  }

  /**
   * @summary Create or update the configuration for devices or modules of an IoT hub. An ETag must
   * not be specified for the create operation. An ETag must be specified for the update operation.
   * Note that configuration Id and Content cannot be updated by the user.
   * @param id
   * @param configuration
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceCreateOrUpdateConfigurationResponse>
   */
  createOrUpdateConfiguration(id: string, configuration: Models.Configuration, options?: Models.ServiceCreateOrUpdateConfigurationOptionalParams): Promise<Models.ServiceCreateOrUpdateConfigurationResponse>;
  /**
   * @param id
   * @param configuration
   * @param callback The callback
   */
  createOrUpdateConfiguration(id: string, configuration: Models.Configuration, callback: msRest.ServiceCallback<Models.Configuration>): void;
  /**
   * @param id
   * @param configuration
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateConfiguration(id: string, configuration: Models.Configuration, options: Models.ServiceCreateOrUpdateConfigurationOptionalParams, callback: msRest.ServiceCallback<Models.Configuration>): void;
  createOrUpdateConfiguration(id: string, configuration: Models.Configuration, options?: Models.ServiceCreateOrUpdateConfigurationOptionalParams | msRest.ServiceCallback<Models.Configuration>, callback?: msRest.ServiceCallback<Models.Configuration>): Promise<Models.ServiceCreateOrUpdateConfigurationResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        configuration,
        options
      },
      createOrUpdateConfigurationOperationSpec,
      callback) as Promise<Models.ServiceCreateOrUpdateConfigurationResponse>;
  }

  /**
   * @summary Delete the configuration for devices or modules of an IoT hub. This request requires
   * the If-Match header. The client may specify the ETag for the device identity on the request in
   * order to compare to the ETag maintained by the service for the purpose of optimistic
   * concurrency. The delete operation is performed only if the ETag sent by the client matches the
   * value maintained by the server, indicating that the device identity has not been modified since
   * it was retrieved by the client. To force an unconditional delete, set If-Match to the wildcard
   * character (*).
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteConfiguration(id: string, options?: Models.ServiceDeleteConfigurationOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  deleteConfiguration(id: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteConfiguration(id: string, options: Models.ServiceDeleteConfigurationOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteConfiguration(id: string, options?: Models.ServiceDeleteConfigurationOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      deleteConfigurationOperationSpec,
      callback);
  }

  /**
   * @summary Get multiple configurations for devices or modules of an IoT Hub. Returns the specified
   * number of configurations for Iot Hub. Pagination is not supported.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceGetConfigurationsResponse>
   */
  getConfigurations(options?: Models.ServiceGetConfigurationsOptionalParams): Promise<Models.ServiceGetConfigurationsResponse>;
  /**
   * @param callback The callback
   */
  getConfigurations(callback: msRest.ServiceCallback<Models.Configuration[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getConfigurations(options: Models.ServiceGetConfigurationsOptionalParams, callback: msRest.ServiceCallback<Models.Configuration[]>): void;
  getConfigurations(options?: Models.ServiceGetConfigurationsOptionalParams | msRest.ServiceCallback<Models.Configuration[]>, callback?: msRest.ServiceCallback<Models.Configuration[]>): Promise<Models.ServiceGetConfigurationsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getConfigurationsOperationSpec,
      callback) as Promise<Models.ServiceGetConfigurationsResponse>;
  }

  /**
   * Validates the target condition query and custom metric queries for a configuration.
   * @summary Validates the target condition query and custom metric queries for a configuration.
   * @param input
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceTestConfigurationQueriesResponse>
   */
  testConfigurationQueries(input: Models.ConfigurationQueriesTestInput, options?: msRest.RequestOptionsBase): Promise<Models.ServiceTestConfigurationQueriesResponse>;
  /**
   * @param input
   * @param callback The callback
   */
  testConfigurationQueries(input: Models.ConfigurationQueriesTestInput, callback: msRest.ServiceCallback<Models.ConfigurationQueriesTestResponse>): void;
  /**
   * @param input
   * @param options The optional parameters
   * @param callback The callback
   */
  testConfigurationQueries(input: Models.ConfigurationQueriesTestInput, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConfigurationQueriesTestResponse>): void;
  testConfigurationQueries(input: Models.ConfigurationQueriesTestInput, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ConfigurationQueriesTestResponse>, callback?: msRest.ServiceCallback<Models.ConfigurationQueriesTestResponse>): Promise<Models.ServiceTestConfigurationQueriesResponse> {
    return this.client.sendOperationRequest(
      {
        input,
        options
      },
      testConfigurationQueriesOperationSpec,
      callback) as Promise<Models.ServiceTestConfigurationQueriesResponse>;
  }

  /**
   * @summary Retrieves statistics about device identities in the IoT hub’s identity registry.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceGetDeviceRegistryStatisticsResponse>
   */
  getDeviceRegistryStatistics(options?: msRest.RequestOptionsBase): Promise<Models.ServiceGetDeviceRegistryStatisticsResponse>;
  /**
   * @param callback The callback
   */
  getDeviceRegistryStatistics(callback: msRest.ServiceCallback<Models.RegistryStatistics>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeviceRegistryStatistics(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RegistryStatistics>): void;
  getDeviceRegistryStatistics(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RegistryStatistics>, callback?: msRest.ServiceCallback<Models.RegistryStatistics>): Promise<Models.ServiceGetDeviceRegistryStatisticsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDeviceRegistryStatisticsOperationSpec,
      callback) as Promise<Models.ServiceGetDeviceRegistryStatisticsResponse>;
  }

  /**
   * @summary Retrieves service statistics for this IoT hub’s identity registry.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceGetServiceStatisticsResponse>
   */
  getServiceStatistics(options?: msRest.RequestOptionsBase): Promise<Models.ServiceGetServiceStatisticsResponse>;
  /**
   * @param callback The callback
   */
  getServiceStatistics(callback: msRest.ServiceCallback<Models.ServiceStatistics>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getServiceStatistics(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServiceStatistics>): void;
  getServiceStatistics(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ServiceStatistics>, callback?: msRest.ServiceCallback<Models.ServiceStatistics>): Promise<Models.ServiceGetServiceStatisticsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getServiceStatisticsOperationSpec,
      callback) as Promise<Models.ServiceGetServiceStatisticsResponse>;
  }

  /**
   * @summary Get the identities of multiple devices from the IoT hub identity registry. Not
   * recommended. Use the IoT Hub query language to retrieve device twin and device identity
   * information. See https://docs.microsoft.com/en-us/rest/api/iothub/service/queryiothub and
   * https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-query-language for more
   * information.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceGetDevicesResponse>
   */
  getDevices(options?: Models.ServiceGetDevicesOptionalParams): Promise<Models.ServiceGetDevicesResponse>;
  /**
   * @param callback The callback
   */
  getDevices(callback: msRest.ServiceCallback<Models.Device[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDevices(options: Models.ServiceGetDevicesOptionalParams, callback: msRest.ServiceCallback<Models.Device[]>): void;
  getDevices(options?: Models.ServiceGetDevicesOptionalParams | msRest.ServiceCallback<Models.Device[]>, callback?: msRest.ServiceCallback<Models.Device[]>): Promise<Models.ServiceGetDevicesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDevicesOperationSpec,
      callback) as Promise<Models.ServiceGetDevicesResponse>;
  }

  /**
   * Create, update, or delete the identiies of multiple devices from the IoT hub identity registry.
   * A device identity can be specified only once in the list. Different operations (create, update,
   * delete) on different devices are allowed. A maximum of 100 devices can be specified per
   * invocation. For large scale operations, consider using the import feature using blob
   * storage(https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities).
   * @summary Create, update, or delete the identities of multiple devices from the IoT hub identity
   * registry.
   * @param devices
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceBulkCreateOrUpdateDevicesResponse>
   */
  bulkCreateOrUpdateDevices(devices: Models.ExportImportDevice[], options?: msRest.RequestOptionsBase): Promise<Models.ServiceBulkCreateOrUpdateDevicesResponse>;
  /**
   * @param devices
   * @param callback The callback
   */
  bulkCreateOrUpdateDevices(devices: Models.ExportImportDevice[], callback: msRest.ServiceCallback<Models.BulkRegistryOperationResult>): void;
  /**
   * @param devices
   * @param options The optional parameters
   * @param callback The callback
   */
  bulkCreateOrUpdateDevices(devices: Models.ExportImportDevice[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BulkRegistryOperationResult>): void;
  bulkCreateOrUpdateDevices(devices: Models.ExportImportDevice[], options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BulkRegistryOperationResult>, callback?: msRest.ServiceCallback<Models.BulkRegistryOperationResult>): Promise<Models.ServiceBulkCreateOrUpdateDevicesResponse> {
    return this.client.sendOperationRequest(
      {
        devices,
        options
      },
      bulkCreateOrUpdateDevicesOperationSpec,
      callback) as Promise<Models.ServiceBulkCreateOrUpdateDevicesResponse>;
  }

  /**
   * Query an IoT hub to retrieve information regarding device twins using a SQL-like language. See
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language for more information.
   * Pagination of results is supported. This returns information about device twins only.
   * @summary Query an IoT hub to retrieve information regarding device twins using a SQL-like
   * language.
   * @param querySpecification
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceQueryIotHubResponse>
   */
  queryIotHub(querySpecification: Models.QuerySpecification, options?: msRest.RequestOptionsBase): Promise<Models.ServiceQueryIotHubResponse>;
  /**
   * @param querySpecification
   * @param callback The callback
   */
  queryIotHub(querySpecification: Models.QuerySpecification, callback: msRest.ServiceCallback<Models.QueryResult>): void;
  /**
   * @param querySpecification
   * @param options The optional parameters
   * @param callback The callback
   */
  queryIotHub(querySpecification: Models.QuerySpecification, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.QueryResult>): void;
  queryIotHub(querySpecification: Models.QuerySpecification, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.QueryResult>, callback?: msRest.ServiceCallback<Models.QueryResult>): Promise<Models.ServiceQueryIotHubResponse> {
    return this.client.sendOperationRequest(
      {
        querySpecification,
        options
      },
      queryIotHubOperationSpec,
      callback) as Promise<Models.ServiceQueryIotHubResponse>;
  }

  /**
   * Retrieve a device from the identity registry of an IoT hub.
   * @summary Retrieve a device from the identity registry of an IoT hub.
   * @param id Device ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceGetDeviceResponse>
   */
  getDevice(id: string, options?: msRest.RequestOptionsBase): Promise<Models.ServiceGetDeviceResponse>;
  /**
   * @param id Device ID.
   * @param callback The callback
   */
  getDevice(id: string, callback: msRest.ServiceCallback<Models.Device>): void;
  /**
   * @param id Device ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDevice(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Device>): void;
  getDevice(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Device>, callback?: msRest.ServiceCallback<Models.Device>): Promise<Models.ServiceGetDeviceResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getDeviceOperationSpec,
      callback) as Promise<Models.ServiceGetDeviceResponse>;
  }

  /**
   * Create or update the identity of a device in the identity registry of an IoT hub. An ETag must
   * not be specified for the create operation. An ETag must be specified for the update operation.
   * Note that generationId and deviceId cannot be updated by the user.
   * @summary Create or update the identity of a device in the identity registry of an IoT hub.
   * @param id Device ID.
   * @param device
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceCreateOrUpdateDeviceResponse>
   */
  createOrUpdateDevice(id: string, device: Models.Device, options?: Models.ServiceCreateOrUpdateDeviceOptionalParams): Promise<Models.ServiceCreateOrUpdateDeviceResponse>;
  /**
   * @param id Device ID.
   * @param device
   * @param callback The callback
   */
  createOrUpdateDevice(id: string, device: Models.Device, callback: msRest.ServiceCallback<Models.Device>): void;
  /**
   * @param id Device ID.
   * @param device
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateDevice(id: string, device: Models.Device, options: Models.ServiceCreateOrUpdateDeviceOptionalParams, callback: msRest.ServiceCallback<Models.Device>): void;
  createOrUpdateDevice(id: string, device: Models.Device, options?: Models.ServiceCreateOrUpdateDeviceOptionalParams | msRest.ServiceCallback<Models.Device>, callback?: msRest.ServiceCallback<Models.Device>): Promise<Models.ServiceCreateOrUpdateDeviceResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        device,
        options
      },
      createOrUpdateDeviceOperationSpec,
      callback) as Promise<Models.ServiceCreateOrUpdateDeviceResponse>;
  }

  /**
   * Delete the identity of a device from the identity registry of an IoT hub. This request requires
   * the If-Match header. The client may specify the ETag for the device identity on the request in
   * order to compare to the ETag maintained by the service for the purpose of optimistic
   * concurrency. The delete operation is performed only if the ETag sent by the client matches the
   * value maintained by the server, indicating that the device identity has not been modified since
   * it was retrieved by the client. To force an unconditional delete, set If-Match to the wildcard
   * character (*).
   * @summary Delete the identity of a device from the identity registry of an IoT hub.
   * @param id Device ID.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteDevice(id: string, options?: Models.ServiceDeleteDeviceOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param id Device ID.
   * @param callback The callback
   */
  deleteDevice(id: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id Device ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteDevice(id: string, options: Models.ServiceDeleteDeviceOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteDevice(id: string, options?: Models.ServiceDeleteDeviceOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      deleteDeviceOperationSpec,
      callback);
  }

  /**
   * Applies the provided configuration content to the specified edge device. Configuration content
   * must have modules content
   * @summary Applies the provided configuration content to the specified edge device.
   * @param id Device ID.
   * @param content Configuration Content.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceApplyConfigurationOnEdgeDeviceResponse>
   */
  applyConfigurationOnEdgeDevice(id: string, content: Models.ConfigurationContent, options?: msRest.RequestOptionsBase): Promise<Models.ServiceApplyConfigurationOnEdgeDeviceResponse>;
  /**
   * @param id Device ID.
   * @param content Configuration Content.
   * @param callback The callback
   */
  applyConfigurationOnEdgeDevice(id: string, content: Models.ConfigurationContent, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id Device ID.
   * @param content Configuration Content.
   * @param options The optional parameters
   * @param callback The callback
   */
  applyConfigurationOnEdgeDevice(id: string, content: Models.ConfigurationContent, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  applyConfigurationOnEdgeDevice(id: string, content: Models.ConfigurationContent, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ServiceApplyConfigurationOnEdgeDeviceResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        content,
        options
      },
      applyConfigurationOnEdgeDeviceOperationSpec,
      callback) as Promise<Models.ServiceApplyConfigurationOnEdgeDeviceResponse>;
  }

  /**
   * Create a new import/export job on an IoT hub. See
   * https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities
   * for more information.
   * @summary Create a new import/export job on an IoT hub.
   * @param jobProperties
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceCreateImportExportJobResponse>
   */
  createImportExportJob(jobProperties: Models.JobProperties, options?: msRest.RequestOptionsBase): Promise<Models.ServiceCreateImportExportJobResponse>;
  /**
   * @param jobProperties
   * @param callback The callback
   */
  createImportExportJob(jobProperties: Models.JobProperties, callback: msRest.ServiceCallback<Models.JobProperties>): void;
  /**
   * @param jobProperties
   * @param options The optional parameters
   * @param callback The callback
   */
  createImportExportJob(jobProperties: Models.JobProperties, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JobProperties>): void;
  createImportExportJob(jobProperties: Models.JobProperties, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JobProperties>, callback?: msRest.ServiceCallback<Models.JobProperties>): Promise<Models.ServiceCreateImportExportJobResponse> {
    return this.client.sendOperationRequest(
      {
        jobProperties,
        options
      },
      createImportExportJobOperationSpec,
      callback) as Promise<Models.ServiceCreateImportExportJobResponse>;
  }

  /**
   * Gets the status of all import/export jobs in an iot hub. See
   * https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities
   * for more information.
   * @summary Gets the status of all import/export jobs in an iot hub
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceGetImportExportJobsResponse>
   */
  getImportExportJobs(options?: msRest.RequestOptionsBase): Promise<Models.ServiceGetImportExportJobsResponse>;
  /**
   * @param callback The callback
   */
  getImportExportJobs(callback: msRest.ServiceCallback<Models.JobProperties[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getImportExportJobs(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JobProperties[]>): void;
  getImportExportJobs(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JobProperties[]>, callback?: msRest.ServiceCallback<Models.JobProperties[]>): Promise<Models.ServiceGetImportExportJobsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getImportExportJobsOperationSpec,
      callback) as Promise<Models.ServiceGetImportExportJobsResponse>;
  }

  /**
   * Gets the status of an import or export job in an iot hub. See
   * https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities
   * for more information.
   * @summary Gets the status of an import or export job in an iot hub
   * @param id Job ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceGetImportExportJobResponse>
   */
  getImportExportJob(id: string, options?: msRest.RequestOptionsBase): Promise<Models.ServiceGetImportExportJobResponse>;
  /**
   * @param id Job ID.
   * @param callback The callback
   */
  getImportExportJob(id: string, callback: msRest.ServiceCallback<Models.JobProperties>): void;
  /**
   * @param id Job ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getImportExportJob(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JobProperties>): void;
  getImportExportJob(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JobProperties>, callback?: msRest.ServiceCallback<Models.JobProperties>): Promise<Models.ServiceGetImportExportJobResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getImportExportJobOperationSpec,
      callback) as Promise<Models.ServiceGetImportExportJobResponse>;
  }

  /**
   * Cancels an import or export job in an IoT hub. See
   * https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities
   * for more information.
   * @summary Cancels an import or export job in an IoT hub.
   * @param id Job ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceCancelImportExportJobResponse>
   */
  cancelImportExportJob(id: string, options?: msRest.RequestOptionsBase): Promise<Models.ServiceCancelImportExportJobResponse>;
  /**
   * @param id Job ID.
   * @param callback The callback
   */
  cancelImportExportJob(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id Job ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  cancelImportExportJob(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  cancelImportExportJob(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ServiceCancelImportExportJobResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      cancelImportExportJobOperationSpec,
      callback) as Promise<Models.ServiceCancelImportExportJobResponse>;
  }

  /**
   * Deletes all the pending commands for this device from the IoT hub
   * @summary Deletes all the pending commands for this device from the IoT hub.
   * @param id Device ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServicePurgeCommandQueueResponse>
   */
  purgeCommandQueue(id: string, options?: msRest.RequestOptionsBase): Promise<Models.ServicePurgeCommandQueueResponse>;
  /**
   * @param id Device ID.
   * @param callback The callback
   */
  purgeCommandQueue(id: string, callback: msRest.ServiceCallback<Models.PurgeMessageQueueResult>): void;
  /**
   * @param id Device ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  purgeCommandQueue(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PurgeMessageQueueResult>): void;
  purgeCommandQueue(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PurgeMessageQueueResult>, callback?: msRest.ServiceCallback<Models.PurgeMessageQueueResult>): Promise<Models.ServicePurgeCommandQueueResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      purgeCommandQueueOperationSpec,
      callback) as Promise<Models.ServicePurgeCommandQueueResponse>;
  }

  /**
   * @summary Get FaultInjection entity
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceGetFaultInjectionResponse>
   */
  getFaultInjection(options?: msRest.RequestOptionsBase): Promise<Models.ServiceGetFaultInjectionResponse>;
  /**
   * @param callback The callback
   */
  getFaultInjection(callback: msRest.ServiceCallback<Models.FaultInjectionProperties>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getFaultInjection(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FaultInjectionProperties>): void;
  getFaultInjection(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FaultInjectionProperties>, callback?: msRest.ServiceCallback<Models.FaultInjectionProperties>): Promise<Models.ServiceGetFaultInjectionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getFaultInjectionOperationSpec,
      callback) as Promise<Models.ServiceGetFaultInjectionResponse>;
  }

  /**
   * @summary Create or update FaultInjection entity
   * @param value
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  setFaultInjection(value: Models.FaultInjectionProperties, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param value
   * @param callback The callback
   */
  setFaultInjection(value: Models.FaultInjectionProperties, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param value
   * @param options The optional parameters
   * @param callback The callback
   */
  setFaultInjection(value: Models.FaultInjectionProperties, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  setFaultInjection(value: Models.FaultInjectionProperties, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        value,
        options
      },
      setFaultInjectionOperationSpec,
      callback);
  }

  /**
   * Gets a device twin. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins
   * for more information.
   * @summary Gets a device twin.
   * @param id Device ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceGetTwinResponse>
   */
  getTwin(id: string, options?: msRest.RequestOptionsBase): Promise<Models.ServiceGetTwinResponse>;
  /**
   * @param id Device ID.
   * @param callback The callback
   */
  getTwin(id: string, callback: msRest.ServiceCallback<Models.Twin>): void;
  /**
   * @param id Device ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getTwin(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Twin>): void;
  getTwin(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Twin>, callback?: msRest.ServiceCallback<Models.Twin>): Promise<Models.ServiceGetTwinResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getTwinOperationSpec,
      callback) as Promise<Models.ServiceGetTwinResponse>;
  }

  /**
   * Replaces a device twin. See
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information.
   * @summary Replaces tags and desired properties of a device twin.
   * @param id Device ID.
   * @param deviceTwinInfo Device twin info
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceReplaceTwinResponse>
   */
  replaceTwin(id: string, deviceTwinInfo: Models.Twin, options?: Models.ServiceReplaceTwinOptionalParams): Promise<Models.ServiceReplaceTwinResponse>;
  /**
   * @param id Device ID.
   * @param deviceTwinInfo Device twin info
   * @param callback The callback
   */
  replaceTwin(id: string, deviceTwinInfo: Models.Twin, callback: msRest.ServiceCallback<Models.Twin>): void;
  /**
   * @param id Device ID.
   * @param deviceTwinInfo Device twin info
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceTwin(id: string, deviceTwinInfo: Models.Twin, options: Models.ServiceReplaceTwinOptionalParams, callback: msRest.ServiceCallback<Models.Twin>): void;
  replaceTwin(id: string, deviceTwinInfo: Models.Twin, options?: Models.ServiceReplaceTwinOptionalParams | msRest.ServiceCallback<Models.Twin>, callback?: msRest.ServiceCallback<Models.Twin>): Promise<Models.ServiceReplaceTwinResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        deviceTwinInfo,
        options
      },
      replaceTwinOperationSpec,
      callback) as Promise<Models.ServiceReplaceTwinResponse>;
  }

  /**
   * Updates a device twin. See
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information.
   * @summary Updates tags and desired properties of a device twin.
   * @param id Device ID.
   * @param deviceTwinInfo Device twin info
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceUpdateTwinResponse>
   */
  updateTwin(id: string, deviceTwinInfo: Models.Twin, options?: Models.ServiceUpdateTwinOptionalParams): Promise<Models.ServiceUpdateTwinResponse>;
  /**
   * @param id Device ID.
   * @param deviceTwinInfo Device twin info
   * @param callback The callback
   */
  updateTwin(id: string, deviceTwinInfo: Models.Twin, callback: msRest.ServiceCallback<Models.Twin>): void;
  /**
   * @param id Device ID.
   * @param deviceTwinInfo Device twin info
   * @param options The optional parameters
   * @param callback The callback
   */
  updateTwin(id: string, deviceTwinInfo: Models.Twin, options: Models.ServiceUpdateTwinOptionalParams, callback: msRest.ServiceCallback<Models.Twin>): void;
  updateTwin(id: string, deviceTwinInfo: Models.Twin, options?: Models.ServiceUpdateTwinOptionalParams | msRest.ServiceCallback<Models.Twin>, callback?: msRest.ServiceCallback<Models.Twin>): Promise<Models.ServiceUpdateTwinResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        deviceTwinInfo,
        options
      },
      updateTwinOperationSpec,
      callback) as Promise<Models.ServiceUpdateTwinResponse>;
  }

  /**
   * Gets a module twin. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins
   * for more information.
   * @summary Gets a module twin.
   * @param id Device ID.
   * @param mid Module ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceGetModuleTwinResponse>
   */
  getModuleTwin(id: string, mid: string, options?: msRest.RequestOptionsBase): Promise<Models.ServiceGetModuleTwinResponse>;
  /**
   * @param id Device ID.
   * @param mid Module ID.
   * @param callback The callback
   */
  getModuleTwin(id: string, mid: string, callback: msRest.ServiceCallback<Models.Twin>): void;
  /**
   * @param id Device ID.
   * @param mid Module ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getModuleTwin(id: string, mid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Twin>): void;
  getModuleTwin(id: string, mid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Twin>, callback?: msRest.ServiceCallback<Models.Twin>): Promise<Models.ServiceGetModuleTwinResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        mid,
        options
      },
      getModuleTwinOperationSpec,
      callback) as Promise<Models.ServiceGetModuleTwinResponse>;
  }

  /**
   * Replaces a module twin. See
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information.
   * @summary Replaces tags and desired properties of a module twin.
   * @param id Device ID.
   * @param mid Module ID.
   * @param deviceTwinInfo Device twin info
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceReplaceModuleTwinResponse>
   */
  replaceModuleTwin(id: string, mid: string, deviceTwinInfo: Models.Twin, options?: Models.ServiceReplaceModuleTwinOptionalParams): Promise<Models.ServiceReplaceModuleTwinResponse>;
  /**
   * @param id Device ID.
   * @param mid Module ID.
   * @param deviceTwinInfo Device twin info
   * @param callback The callback
   */
  replaceModuleTwin(id: string, mid: string, deviceTwinInfo: Models.Twin, callback: msRest.ServiceCallback<Models.Twin>): void;
  /**
   * @param id Device ID.
   * @param mid Module ID.
   * @param deviceTwinInfo Device twin info
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceModuleTwin(id: string, mid: string, deviceTwinInfo: Models.Twin, options: Models.ServiceReplaceModuleTwinOptionalParams, callback: msRest.ServiceCallback<Models.Twin>): void;
  replaceModuleTwin(id: string, mid: string, deviceTwinInfo: Models.Twin, options?: Models.ServiceReplaceModuleTwinOptionalParams | msRest.ServiceCallback<Models.Twin>, callback?: msRest.ServiceCallback<Models.Twin>): Promise<Models.ServiceReplaceModuleTwinResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        mid,
        deviceTwinInfo,
        options
      },
      replaceModuleTwinOperationSpec,
      callback) as Promise<Models.ServiceReplaceModuleTwinResponse>;
  }

  /**
   * Updates a module twin. See
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information.
   * @summary Updates tags and desired properties of a module twin.
   * @param id Device ID.
   * @param mid Module ID.
   * @param deviceTwinInfo Device twin information
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceUpdateModuleTwinResponse>
   */
  updateModuleTwin(id: string, mid: string, deviceTwinInfo: Models.Twin, options?: Models.ServiceUpdateModuleTwinOptionalParams): Promise<Models.ServiceUpdateModuleTwinResponse>;
  /**
   * @param id Device ID.
   * @param mid Module ID.
   * @param deviceTwinInfo Device twin information
   * @param callback The callback
   */
  updateModuleTwin(id: string, mid: string, deviceTwinInfo: Models.Twin, callback: msRest.ServiceCallback<Models.Twin>): void;
  /**
   * @param id Device ID.
   * @param mid Module ID.
   * @param deviceTwinInfo Device twin information
   * @param options The optional parameters
   * @param callback The callback
   */
  updateModuleTwin(id: string, mid: string, deviceTwinInfo: Models.Twin, options: Models.ServiceUpdateModuleTwinOptionalParams, callback: msRest.ServiceCallback<Models.Twin>): void;
  updateModuleTwin(id: string, mid: string, deviceTwinInfo: Models.Twin, options?: Models.ServiceUpdateModuleTwinOptionalParams | msRest.ServiceCallback<Models.Twin>, callback?: msRest.ServiceCallback<Models.Twin>): Promise<Models.ServiceUpdateModuleTwinResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        mid,
        deviceTwinInfo,
        options
      },
      updateModuleTwinOperationSpec,
      callback) as Promise<Models.ServiceUpdateModuleTwinResponse>;
  }

  /**
   * Retrieves details of a scheduled job from an IoT hub. See
   * https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-jobs for more information.
   * @summary Retrieves details of a scheduled job from an IoT hub.
   * @param id Job ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceGetJobResponse>
   */
  getJob(id: string, options?: msRest.RequestOptionsBase): Promise<Models.ServiceGetJobResponse>;
  /**
   * @param id Job ID.
   * @param callback The callback
   */
  getJob(id: string, callback: msRest.ServiceCallback<Models.JobResponse>): void;
  /**
   * @param id Job ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getJob(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JobResponse>): void;
  getJob(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JobResponse>, callback?: msRest.ServiceCallback<Models.JobResponse>): Promise<Models.ServiceGetJobResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getJobOperationSpec,
      callback) as Promise<Models.ServiceGetJobResponse>;
  }

  /**
   * Creates a new job to schedule update twins or device direct methods on an IoT hub at a scheduled
   * time. See https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-jobs for more
   * information.
   * @summary Creates a new job to schedule update twins or device direct methods on an IoT hub at a
   * scheduled time.
   * @param id Job ID.
   * @param jobRequest
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceCreateJobResponse>
   */
  createJob(id: string, jobRequest: Models.JobRequest, options?: msRest.RequestOptionsBase): Promise<Models.ServiceCreateJobResponse>;
  /**
   * @param id Job ID.
   * @param jobRequest
   * @param callback The callback
   */
  createJob(id: string, jobRequest: Models.JobRequest, callback: msRest.ServiceCallback<Models.JobResponse>): void;
  /**
   * @param id Job ID.
   * @param jobRequest
   * @param options The optional parameters
   * @param callback The callback
   */
  createJob(id: string, jobRequest: Models.JobRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JobResponse>): void;
  createJob(id: string, jobRequest: Models.JobRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JobResponse>, callback?: msRest.ServiceCallback<Models.JobResponse>): Promise<Models.ServiceCreateJobResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        jobRequest,
        options
      },
      createJobOperationSpec,
      callback) as Promise<Models.ServiceCreateJobResponse>;
  }

  /**
   * Cancels a scheduled job on an IoT hub. See
   * https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-jobs for more information.
   * @summary Cancels a scheduled job on an IoT hub.
   * @param id Job ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceCancelJobResponse>
   */
  cancelJob(id: string, options?: msRest.RequestOptionsBase): Promise<Models.ServiceCancelJobResponse>;
  /**
   * @param id Job ID.
   * @param callback The callback
   */
  cancelJob(id: string, callback: msRest.ServiceCallback<Models.JobResponse>): void;
  /**
   * @param id Job ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  cancelJob(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JobResponse>): void;
  cancelJob(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JobResponse>, callback?: msRest.ServiceCallback<Models.JobResponse>): Promise<Models.ServiceCancelJobResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      cancelJobOperationSpec,
      callback) as Promise<Models.ServiceCancelJobResponse>;
  }

  /**
   * Query an IoT hub to retrieve information regarding jobs using the IoT Hub query language. See
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language for more information.
   * Pagination of results is supported. This returns information about jobs only.
   * @summary Query an IoT hub to retrieve information regarding jobs using the IoT Hub query
   * language
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceQueryJobsResponse>
   */
  queryJobs(options?: Models.ServiceQueryJobsOptionalParams): Promise<Models.ServiceQueryJobsResponse>;
  /**
   * @param callback The callback
   */
  queryJobs(callback: msRest.ServiceCallback<Models.QueryResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  queryJobs(options: Models.ServiceQueryJobsOptionalParams, callback: msRest.ServiceCallback<Models.QueryResult>): void;
  queryJobs(options?: Models.ServiceQueryJobsOptionalParams | msRest.ServiceCallback<Models.QueryResult>, callback?: msRest.ServiceCallback<Models.QueryResult>): Promise<Models.ServiceQueryJobsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      queryJobsOperationSpec,
      callback) as Promise<Models.ServiceQueryJobsResponse>;
  }

  /**
   * @summary Retrieve all the module identities on the device.
   * @param id Device ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceGetModulesOnDeviceResponse>
   */
  getModulesOnDevice(id: string, options?: msRest.RequestOptionsBase): Promise<Models.ServiceGetModulesOnDeviceResponse>;
  /**
   * @param id Device ID.
   * @param callback The callback
   */
  getModulesOnDevice(id: string, callback: msRest.ServiceCallback<Models.Module[]>): void;
  /**
   * @param id Device ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getModulesOnDevice(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Module[]>): void;
  getModulesOnDevice(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Module[]>, callback?: msRest.ServiceCallback<Models.Module[]>): Promise<Models.ServiceGetModulesOnDeviceResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getModulesOnDeviceOperationSpec,
      callback) as Promise<Models.ServiceGetModulesOnDeviceResponse>;
  }

  /**
   * @summary Retrieve the specified module identity on the device.
   * @param id Device ID.
   * @param mid Module ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceGetModuleResponse>
   */
  getModule(id: string, mid: string, options?: msRest.RequestOptionsBase): Promise<Models.ServiceGetModuleResponse>;
  /**
   * @param id Device ID.
   * @param mid Module ID.
   * @param callback The callback
   */
  getModule(id: string, mid: string, callback: msRest.ServiceCallback<Models.Module>): void;
  /**
   * @param id Device ID.
   * @param mid Module ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getModule(id: string, mid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Module>): void;
  getModule(id: string, mid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Module>, callback?: msRest.ServiceCallback<Models.Module>): Promise<Models.ServiceGetModuleResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        mid,
        options
      },
      getModuleOperationSpec,
      callback) as Promise<Models.ServiceGetModuleResponse>;
  }

  /**
   * @summary Create or update the module identity for device in IoT hub. An ETag must not be
   * specified for the create operation. An ETag must be specified for the update operation. Note
   * that moduleId and generation cannot be updated by the user.
   * @param id Device ID.
   * @param mid Module ID.
   * @param module
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceCreateOrUpdateModuleResponse>
   */
  createOrUpdateModule(id: string, mid: string, module: Models.Module, options?: Models.ServiceCreateOrUpdateModuleOptionalParams): Promise<Models.ServiceCreateOrUpdateModuleResponse>;
  /**
   * @param id Device ID.
   * @param mid Module ID.
   * @param module
   * @param callback The callback
   */
  createOrUpdateModule(id: string, mid: string, module: Models.Module, callback: msRest.ServiceCallback<Models.Module>): void;
  /**
   * @param id Device ID.
   * @param mid Module ID.
   * @param module
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateModule(id: string, mid: string, module: Models.Module, options: Models.ServiceCreateOrUpdateModuleOptionalParams, callback: msRest.ServiceCallback<Models.Module>): void;
  createOrUpdateModule(id: string, mid: string, module: Models.Module, options?: Models.ServiceCreateOrUpdateModuleOptionalParams | msRest.ServiceCallback<Models.Module>, callback?: msRest.ServiceCallback<Models.Module>): Promise<Models.ServiceCreateOrUpdateModuleResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        mid,
        module,
        options
      },
      createOrUpdateModuleOperationSpec,
      callback) as Promise<Models.ServiceCreateOrUpdateModuleResponse>;
  }

  /**
   * @summary Delete the module identity for device of an IoT hub. This request requires the If-Match
   * header. The client may specify the ETag for the device identity on the request in order to
   * compare to the ETag maintained by the service for the purpose of optimistic concurrency. The
   * delete operation is performed only if the ETag sent by the client matches the value maintained
   * by the server, indicating that the device identity has not been modified since it was retrieved
   * by the client. To force an unconditional delete, set If-Match to the wildcard character (*).
   * @param id Device ID.
   * @param mid Module ID.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteModule(id: string, mid: string, options?: Models.ServiceDeleteModuleOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param id Device ID.
   * @param mid Module ID.
   * @param callback The callback
   */
  deleteModule(id: string, mid: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id Device ID.
   * @param mid Module ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteModule(id: string, mid: string, options: Models.ServiceDeleteModuleOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteModule(id: string, mid: string, options?: Models.ServiceDeleteModuleOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        mid,
        options
      },
      deleteModuleOperationSpec,
      callback);
  }

  /**
   * Invoke a direct method on a device. See
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-direct-methods for more information.
   * @summary Invoke a direct method on a device.
   * @param deviceId
   * @param directMethodRequest
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceInvokeDeviceMethodResponse>
   */
  invokeDeviceMethod(deviceId: string, directMethodRequest: Models.CloudToDeviceMethod, options?: msRest.RequestOptionsBase): Promise<Models.ServiceInvokeDeviceMethodResponse>;
  /**
   * @param deviceId
   * @param directMethodRequest
   * @param callback The callback
   */
  invokeDeviceMethod(deviceId: string, directMethodRequest: Models.CloudToDeviceMethod, callback: msRest.ServiceCallback<Models.CloudToDeviceMethodResult>): void;
  /**
   * @param deviceId
   * @param directMethodRequest
   * @param options The optional parameters
   * @param callback The callback
   */
  invokeDeviceMethod(deviceId: string, directMethodRequest: Models.CloudToDeviceMethod, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CloudToDeviceMethodResult>): void;
  invokeDeviceMethod(deviceId: string, directMethodRequest: Models.CloudToDeviceMethod, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CloudToDeviceMethodResult>, callback?: msRest.ServiceCallback<Models.CloudToDeviceMethodResult>): Promise<Models.ServiceInvokeDeviceMethodResponse> {
    return this.client.sendOperationRequest(
      {
        deviceId,
        directMethodRequest,
        options
      },
      invokeDeviceMethodOperationSpec,
      callback) as Promise<Models.ServiceInvokeDeviceMethodResponse>;
  }

  /**
   * Invoke a direct method on a module of a device. See
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-direct-methods for more information
   * @summary Invoke a direct method on a module of a device.
   * @param deviceId
   * @param moduleId
   * @param directMethodRequest
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceInvokeDeviceModuleMethodResponse>
   */
  invokeDeviceModuleMethod(deviceId: string, moduleId: string, directMethodRequest: Models.CloudToDeviceMethod, options?: msRest.RequestOptionsBase): Promise<Models.ServiceInvokeDeviceModuleMethodResponse>;
  /**
   * @param deviceId
   * @param moduleId
   * @param directMethodRequest
   * @param callback The callback
   */
  invokeDeviceModuleMethod(deviceId: string, moduleId: string, directMethodRequest: Models.CloudToDeviceMethod, callback: msRest.ServiceCallback<Models.CloudToDeviceMethodResult>): void;
  /**
   * @param deviceId
   * @param moduleId
   * @param directMethodRequest
   * @param options The optional parameters
   * @param callback The callback
   */
  invokeDeviceModuleMethod(deviceId: string, moduleId: string, directMethodRequest: Models.CloudToDeviceMethod, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CloudToDeviceMethodResult>): void;
  invokeDeviceModuleMethod(deviceId: string, moduleId: string, directMethodRequest: Models.CloudToDeviceMethod, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CloudToDeviceMethodResult>, callback?: msRest.ServiceCallback<Models.CloudToDeviceMethodResult>): Promise<Models.ServiceInvokeDeviceModuleMethodResponse> {
    return this.client.sendOperationRequest(
      {
        deviceId,
        moduleId,
        directMethodRequest,
        options
      },
      invokeDeviceModuleMethodOperationSpec,
      callback) as Promise<Models.ServiceInvokeDeviceModuleMethodResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "configurations/{id}",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Configuration
    },
    default: {}
  },
  serializer
};

const createOrUpdateConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "configurations/{id}",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch
  ],
  requestBody: {
    parameterPath: "configuration",
    mapper: {
      ...Mappers.Configuration,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Configuration
    },
    201: {
      bodyMapper: Mappers.Configuration
    },
    default: {}
  },
  serializer
};

const deleteConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "configurations/{id}",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch
  ],
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const getConfigurationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "configurations",
  queryParameters: [
    Parameters.top,
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Configuration"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const testConfigurationQueriesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "configurations/testQueries",
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: "input",
    mapper: {
      ...Mappers.ConfigurationQueriesTestInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationQueriesTestResponse
    },
    default: {}
  },
  serializer
};

const getDeviceRegistryStatisticsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "statistics/devices",
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RegistryStatistics
    },
    default: {}
  },
  serializer
};

const getServiceStatisticsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "statistics/service",
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServiceStatistics
    },
    default: {}
  },
  serializer
};

const getDevicesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "devices",
  queryParameters: [
    Parameters.top,
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Device"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const bulkCreateOrUpdateDevicesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "devices",
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: "devices",
    mapper: {
      required: true,
      serializedName: "devices",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "ExportImportDevice"
          }
        }
      }
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BulkRegistryOperationResult
    },
    400: {
      bodyMapper: Mappers.BulkRegistryOperationResult
    },
    default: {}
  },
  serializer
};

const queryIotHubOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "devices/query",
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: "querySpecification",
    mapper: {
      ...Mappers.QuerySpecification,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.QueryResult
    },
    default: {}
  },
  serializer
};

const getDeviceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "devices/{id}",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Device
    },
    default: {}
  },
  serializer
};

const createOrUpdateDeviceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "devices/{id}",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch
  ],
  requestBody: {
    parameterPath: "device",
    mapper: {
      ...Mappers.Device,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Device
    },
    default: {}
  },
  serializer
};

const deleteDeviceOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "devices/{id}",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch
  ],
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const applyConfigurationOnEdgeDeviceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "devices/{id}/applyConfigurationContent",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: "content",
    mapper: {
      ...Mappers.ConfigurationContent,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    204: {},
    default: {}
  },
  serializer
};

const createImportExportJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "jobs/create",
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: "jobProperties",
    mapper: {
      ...Mappers.JobProperties,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.JobProperties
    },
    default: {}
  },
  serializer
};

const getImportExportJobsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "jobs",
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobProperties"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getImportExportJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "jobs/{id}",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobProperties
    },
    default: {}
  },
  serializer
};

const cancelImportExportJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "jobs/{id}",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    204: {},
    default: {}
  },
  serializer
};

const purgeCommandQueueOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "devices/{id}/commands",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PurgeMessageQueueResult
    },
    default: {}
  },
  serializer
};

const getFaultInjectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "faultInjection",
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FaultInjectionProperties
    },
    default: {}
  },
  serializer
};

const setFaultInjectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "faultInjection",
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: "value",
    mapper: {
      ...Mappers.FaultInjectionProperties,
      required: true
    }
  },
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getTwinOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "twins/{id}",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Twin
    },
    default: {}
  },
  serializer
};

const replaceTwinOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "twins/{id}",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch
  ],
  requestBody: {
    parameterPath: "deviceTwinInfo",
    mapper: {
      ...Mappers.Twin,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Twin
    },
    default: {}
  },
  serializer
};

const updateTwinOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "twins/{id}",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch
  ],
  requestBody: {
    parameterPath: "deviceTwinInfo",
    mapper: {
      ...Mappers.Twin,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Twin
    },
    default: {}
  },
  serializer
};

const getModuleTwinOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "twins/{id}/modules/{mid}",
  urlParameters: [
    Parameters.id,
    Parameters.mid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Twin
    },
    default: {}
  },
  serializer
};

const replaceModuleTwinOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "twins/{id}/modules/{mid}",
  urlParameters: [
    Parameters.id,
    Parameters.mid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch
  ],
  requestBody: {
    parameterPath: "deviceTwinInfo",
    mapper: {
      ...Mappers.Twin,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Twin
    },
    default: {}
  },
  serializer
};

const updateModuleTwinOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "twins/{id}/modules/{mid}",
  urlParameters: [
    Parameters.id,
    Parameters.mid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch
  ],
  requestBody: {
    parameterPath: "deviceTwinInfo",
    mapper: {
      ...Mappers.Twin,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Twin
    },
    default: {}
  },
  serializer
};

const getJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "jobs/v2/{id}",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobResponse
    },
    default: {}
  },
  serializer
};

const createJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "jobs/v2/{id}",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: "jobRequest",
    mapper: {
      ...Mappers.JobRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.JobResponse
    },
    default: {}
  },
  serializer
};

const cancelJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "jobs/v2/{id}/cancel",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobResponse
    },
    default: {}
  },
  serializer
};

const queryJobsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "jobs/v2/query",
  queryParameters: [
    Parameters.jobType,
    Parameters.jobStatus,
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.QueryResult
    },
    default: {}
  },
  serializer
};

const getModulesOnDeviceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "devices/{id}/modules",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Module"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getModuleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "devices/{id}/modules/{mid}",
  urlParameters: [
    Parameters.id,
    Parameters.mid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Module
    },
    default: {}
  },
  serializer
};

const createOrUpdateModuleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "devices/{id}/modules/{mid}",
  urlParameters: [
    Parameters.id,
    Parameters.mid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch
  ],
  requestBody: {
    parameterPath: "module",
    mapper: {
      ...Mappers.Module,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Module
    },
    201: {
      bodyMapper: Mappers.Module
    },
    default: {}
  },
  serializer
};

const deleteModuleOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "devices/{id}/modules/{mid}",
  urlParameters: [
    Parameters.id,
    Parameters.mid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch
  ],
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const invokeDeviceMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "twins/{deviceId}/methods",
  urlParameters: [
    Parameters.deviceId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: "directMethodRequest",
    mapper: {
      ...Mappers.CloudToDeviceMethod,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CloudToDeviceMethodResult
    },
    default: {}
  },
  serializer
};

const invokeDeviceModuleMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "twins/{deviceId}/modules/{moduleId}/methods",
  urlParameters: [
    Parameters.deviceId,
    Parameters.moduleId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: "directMethodRequest",
    mapper: {
      ...Mappers.CloudToDeviceMethod,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CloudToDeviceMethodResult
    },
    default: {}
  },
  serializer
};
