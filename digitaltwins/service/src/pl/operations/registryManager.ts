/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/registryManagerMappers";
import * as Parameters from "../models/parameters";
import { IotHubGatewayServiceAPIsContext } from "../iotHubGatewayServiceAPIsContext";

/** Class representing a RegistryManager. */
export class RegistryManager {
  private readonly client: IotHubGatewayServiceAPIsContext;

  /**
   * Create a RegistryManager.
   * @param {IotHubGatewayServiceAPIsContext} client Reference to the service client.
   */
  constructor(client: IotHubGatewayServiceAPIsContext) {
    this.client = client;
  }

  /**
   * @summary Retrieves statistics about device identities in the IoT hub’s identity registry.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistryManagerGetDeviceStatisticsResponse>
   */
  getDeviceStatistics(options?: msRest.RequestOptionsBase): Promise<Models.RegistryManagerGetDeviceStatisticsResponse>;
  /**
   * @param callback The callback
   */
  getDeviceStatistics(callback: msRest.ServiceCallback<Models.RegistryStatistics>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeviceStatistics(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RegistryStatistics>): void;
  getDeviceStatistics(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RegistryStatistics>, callback?: msRest.ServiceCallback<Models.RegistryStatistics>): Promise<Models.RegistryManagerGetDeviceStatisticsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDeviceStatisticsOperationSpec,
      callback) as Promise<Models.RegistryManagerGetDeviceStatisticsResponse>;
  }

  /**
   * @summary Retrieves service statistics for this IoT hub’s identity registry.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistryManagerGetServiceStatisticsResponse>
   */
  getServiceStatistics(options?: msRest.RequestOptionsBase): Promise<Models.RegistryManagerGetServiceStatisticsResponse>;
  /**
   * @param callback The callback
   */
  getServiceStatistics(callback: msRest.ServiceCallback<Models.ServiceStatistics>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getServiceStatistics(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServiceStatistics>): void;
  getServiceStatistics(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ServiceStatistics>, callback?: msRest.ServiceCallback<Models.ServiceStatistics>): Promise<Models.RegistryManagerGetServiceStatisticsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getServiceStatisticsOperationSpec,
      callback) as Promise<Models.RegistryManagerGetServiceStatisticsResponse>;
  }

  /**
   * @summary Get the identities of multiple devices from the IoT hub identity registry. Not
   * recommended. Use the IoT Hub query language to retrieve device twin and device identity
   * information. See https://docs.microsoft.com/en-us/rest/api/iothub/service/queryiothub and
   * https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-query-language for more
   * information.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistryManagerGetDevicesResponse>
   */
  getDevices(options?: Models.RegistryManagerGetDevicesOptionalParams): Promise<Models.RegistryManagerGetDevicesResponse>;
  /**
   * @param callback The callback
   */
  getDevices(callback: msRest.ServiceCallback<Models.Device[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDevices(options: Models.RegistryManagerGetDevicesOptionalParams, callback: msRest.ServiceCallback<Models.Device[]>): void;
  getDevices(options?: Models.RegistryManagerGetDevicesOptionalParams | msRest.ServiceCallback<Models.Device[]>, callback?: msRest.ServiceCallback<Models.Device[]>): Promise<Models.RegistryManagerGetDevicesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDevicesOperationSpec,
      callback) as Promise<Models.RegistryManagerGetDevicesResponse>;
  }

  /**
   * Create, update, or delete the identiies of multiple devices from the IoT hub identity registry.
   * A device identity can be specified only once in the list. Different operations (create, update,
   * delete) on different devices are allowed. A maximum of 100 devices can be specified per
   * invocation. For large scale operations, consider using the import feature using blob
   * storage(https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities).
   * @summary Create, update, or delete the identities of multiple devices from the IoT hub identity
   * registry.
   * @param devices
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistryManagerBulkDeviceCRUDResponse>
   */
  bulkDeviceCRUD(devices: Models.ExportImportDevice[], options?: msRest.RequestOptionsBase): Promise<Models.RegistryManagerBulkDeviceCRUDResponse>;
  /**
   * @param devices
   * @param callback The callback
   */
  bulkDeviceCRUD(devices: Models.ExportImportDevice[], callback: msRest.ServiceCallback<Models.BulkRegistryOperationResult>): void;
  /**
   * @param devices
   * @param options The optional parameters
   * @param callback The callback
   */
  bulkDeviceCRUD(devices: Models.ExportImportDevice[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BulkRegistryOperationResult>): void;
  bulkDeviceCRUD(devices: Models.ExportImportDevice[], options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BulkRegistryOperationResult>, callback?: msRest.ServiceCallback<Models.BulkRegistryOperationResult>): Promise<Models.RegistryManagerBulkDeviceCRUDResponse> {
    return this.client.sendOperationRequest(
      {
        devices,
        options
      },
      bulkDeviceCRUDOperationSpec,
      callback) as Promise<Models.RegistryManagerBulkDeviceCRUDResponse>;
  }

  /**
   * Query an IoT hub to retrieve information regarding device twins using a SQL-like language. See
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language for more information.
   * Pagination of results is supported. This returns information about device twins only.
   * @summary Query an IoT hub to retrieve information regarding device twins using a SQL-like
   * language.
   * @param querySpecification
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistryManagerQueryIotHubResponse>
   */
  queryIotHub(querySpecification: Models.QuerySpecification, options?: Models.RegistryManagerQueryIotHubOptionalParams): Promise<Models.RegistryManagerQueryIotHubResponse>;
  /**
   * @param querySpecification
   * @param callback The callback
   */
  queryIotHub(querySpecification: Models.QuerySpecification, callback: msRest.ServiceCallback<Models.Twin[]>): void;
  /**
   * @param querySpecification
   * @param options The optional parameters
   * @param callback The callback
   */
  queryIotHub(querySpecification: Models.QuerySpecification, options: Models.RegistryManagerQueryIotHubOptionalParams, callback: msRest.ServiceCallback<Models.Twin[]>): void;
  queryIotHub(querySpecification: Models.QuerySpecification, options?: Models.RegistryManagerQueryIotHubOptionalParams | msRest.ServiceCallback<Models.Twin[]>, callback?: msRest.ServiceCallback<Models.Twin[]>): Promise<Models.RegistryManagerQueryIotHubResponse> {
    return this.client.sendOperationRequest(
      {
        querySpecification,
        options
      },
      queryIotHubOperationSpec,
      callback) as Promise<Models.RegistryManagerQueryIotHubResponse>;
  }

  /**
   * Retrieve a device from the identity registry of an IoT hub.
   * @summary Retrieve a device from the identity registry of an IoT hub.
   * @param id Device ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistryManagerGetDeviceResponse>
   */
  getDevice(id: string, options?: msRest.RequestOptionsBase): Promise<Models.RegistryManagerGetDeviceResponse>;
  /**
   * @param id Device ID.
   * @param callback The callback
   */
  getDevice(id: string, callback: msRest.ServiceCallback<Models.Device>): void;
  /**
   * @param id Device ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDevice(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Device>): void;
  getDevice(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Device>, callback?: msRest.ServiceCallback<Models.Device>): Promise<Models.RegistryManagerGetDeviceResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getDeviceOperationSpec,
      callback) as Promise<Models.RegistryManagerGetDeviceResponse>;
  }

  /**
   * Create or update the identity of a device in the identity registry of an IoT hub. An ETag must
   * not be specified for the create operation. An ETag must be specified for the update operation.
   * Note that generationId and deviceId cannot be updated by the user.
   * @summary Create or update the identity of a device in the identity registry of an IoT hub.
   * @param id Device ID.
   * @param device
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistryManagerCreateOrUpdateDeviceResponse>
   */
  createOrUpdateDevice(id: string, device: Models.Device, options?: Models.RegistryManagerCreateOrUpdateDeviceOptionalParams): Promise<Models.RegistryManagerCreateOrUpdateDeviceResponse>;
  /**
   * @param id Device ID.
   * @param device
   * @param callback The callback
   */
  createOrUpdateDevice(id: string, device: Models.Device, callback: msRest.ServiceCallback<Models.Device>): void;
  /**
   * @param id Device ID.
   * @param device
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateDevice(id: string, device: Models.Device, options: Models.RegistryManagerCreateOrUpdateDeviceOptionalParams, callback: msRest.ServiceCallback<Models.Device>): void;
  createOrUpdateDevice(id: string, device: Models.Device, options?: Models.RegistryManagerCreateOrUpdateDeviceOptionalParams | msRest.ServiceCallback<Models.Device>, callback?: msRest.ServiceCallback<Models.Device>): Promise<Models.RegistryManagerCreateOrUpdateDeviceResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        device,
        options
      },
      createOrUpdateDeviceOperationSpec,
      callback) as Promise<Models.RegistryManagerCreateOrUpdateDeviceResponse>;
  }

  /**
   * Delete the identity of a device from the identity registry of an IoT hub. This request requires
   * the If-Match header. The client may specify the ETag for the device identity on the request in
   * order to compare to the ETag maintained by the service for the purpose of optimistic
   * concurrency. The delete operation is performed only if the ETag sent by the client matches the
   * value maintained by the server, indicating that the device identity has not been modified since
   * it was retrieved by the client. To force an unconditional delete, set If-Match to the wildcard
   * character (*).
   * @summary Delete the identity of a device from the identity registry of an IoT hub.
   * @param id Device ID.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteDevice(id: string, options?: Models.RegistryManagerDeleteDeviceOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param id Device ID.
   * @param callback The callback
   */
  deleteDevice(id: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id Device ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteDevice(id: string, options: Models.RegistryManagerDeleteDeviceOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteDevice(id: string, options?: Models.RegistryManagerDeleteDeviceOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      deleteDeviceOperationSpec,
      callback);
  }

  /**
   * Deletes all the pending commands for this device from the IoT hub
   * @summary Deletes all the pending commands for this device from the IoT hub.
   * @param id Device ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistryManagerPurgeCommandQueueResponse>
   */
  purgeCommandQueue(id: string, options?: msRest.RequestOptionsBase): Promise<Models.RegistryManagerPurgeCommandQueueResponse>;
  /**
   * @param id Device ID.
   * @param callback The callback
   */
  purgeCommandQueue(id: string, callback: msRest.ServiceCallback<Models.PurgeMessageQueueResult>): void;
  /**
   * @param id Device ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  purgeCommandQueue(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PurgeMessageQueueResult>): void;
  purgeCommandQueue(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PurgeMessageQueueResult>, callback?: msRest.ServiceCallback<Models.PurgeMessageQueueResult>): Promise<Models.RegistryManagerPurgeCommandQueueResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      purgeCommandQueueOperationSpec,
      callback) as Promise<Models.RegistryManagerPurgeCommandQueueResponse>;
  }

  /**
   * @summary Retrieve all the module identities on the device.
   * @param id Device ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistryManagerGetModulesOnDeviceResponse>
   */
  getModulesOnDevice(id: string, options?: msRest.RequestOptionsBase): Promise<Models.RegistryManagerGetModulesOnDeviceResponse>;
  /**
   * @param id Device ID.
   * @param callback The callback
   */
  getModulesOnDevice(id: string, callback: msRest.ServiceCallback<Models.Module[]>): void;
  /**
   * @param id Device ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getModulesOnDevice(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Module[]>): void;
  getModulesOnDevice(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Module[]>, callback?: msRest.ServiceCallback<Models.Module[]>): Promise<Models.RegistryManagerGetModulesOnDeviceResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getModulesOnDeviceOperationSpec,
      callback) as Promise<Models.RegistryManagerGetModulesOnDeviceResponse>;
  }

  /**
   * @summary Retrieve the specified module identity on the device.
   * @param id Device ID.
   * @param mid Module ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistryManagerGetModuleResponse>
   */
  getModule(id: string, mid: string, options?: msRest.RequestOptionsBase): Promise<Models.RegistryManagerGetModuleResponse>;
  /**
   * @param id Device ID.
   * @param mid Module ID.
   * @param callback The callback
   */
  getModule(id: string, mid: string, callback: msRest.ServiceCallback<Models.Module>): void;
  /**
   * @param id Device ID.
   * @param mid Module ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getModule(id: string, mid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Module>): void;
  getModule(id: string, mid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Module>, callback?: msRest.ServiceCallback<Models.Module>): Promise<Models.RegistryManagerGetModuleResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        mid,
        options
      },
      getModuleOperationSpec,
      callback) as Promise<Models.RegistryManagerGetModuleResponse>;
  }

  /**
   * @summary Create or update the module identity for device in IoT hub. An ETag must not be
   * specified for the create operation. An ETag must be specified for the update operation. Note
   * that moduleId and generation cannot be updated by the user.
   * @param id Device ID.
   * @param mid Module ID.
   * @param module
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistryManagerCreateOrUpdateModuleResponse>
   */
  createOrUpdateModule(id: string, mid: string, module: Models.Module, options?: Models.RegistryManagerCreateOrUpdateModuleOptionalParams): Promise<Models.RegistryManagerCreateOrUpdateModuleResponse>;
  /**
   * @param id Device ID.
   * @param mid Module ID.
   * @param module
   * @param callback The callback
   */
  createOrUpdateModule(id: string, mid: string, module: Models.Module, callback: msRest.ServiceCallback<Models.Module>): void;
  /**
   * @param id Device ID.
   * @param mid Module ID.
   * @param module
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateModule(id: string, mid: string, module: Models.Module, options: Models.RegistryManagerCreateOrUpdateModuleOptionalParams, callback: msRest.ServiceCallback<Models.Module>): void;
  createOrUpdateModule(id: string, mid: string, module: Models.Module, options?: Models.RegistryManagerCreateOrUpdateModuleOptionalParams | msRest.ServiceCallback<Models.Module>, callback?: msRest.ServiceCallback<Models.Module>): Promise<Models.RegistryManagerCreateOrUpdateModuleResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        mid,
        module,
        options
      },
      createOrUpdateModuleOperationSpec,
      callback) as Promise<Models.RegistryManagerCreateOrUpdateModuleResponse>;
  }

  /**
   * @summary Delete the module identity for device of an IoT hub. This request requires the If-Match
   * header. The client may specify the ETag for the device identity on the request in order to
   * compare to the ETag maintained by the service for the purpose of optimistic concurrency. The
   * delete operation is performed only if the ETag sent by the client matches the value maintained
   * by the server, indicating that the device identity has not been modified since it was retrieved
   * by the client. To force an unconditional delete, set If-Match to the wildcard character (*).
   * @param id Device ID.
   * @param mid Module ID.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteModule(id: string, mid: string, options?: Models.RegistryManagerDeleteModuleOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param id Device ID.
   * @param mid Module ID.
   * @param callback The callback
   */
  deleteModule(id: string, mid: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id Device ID.
   * @param mid Module ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteModule(id: string, mid: string, options: Models.RegistryManagerDeleteModuleOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteModule(id: string, mid: string, options?: Models.RegistryManagerDeleteModuleOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        mid,
        options
      },
      deleteModuleOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getDeviceStatisticsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "statistics/devices",
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RegistryStatistics
    },
    default: {}
  },
  serializer
};

const getServiceStatisticsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "statistics/service",
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServiceStatistics
    },
    default: {}
  },
  serializer
};

const getDevicesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "devices",
  queryParameters: [
    Parameters.top,
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Device"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const bulkDeviceCRUDOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "devices",
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: "devices",
    mapper: {
      required: true,
      serializedName: "devices",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "ExportImportDevice"
          }
        }
      }
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BulkRegistryOperationResult
    },
    400: {
      bodyMapper: Mappers.BulkRegistryOperationResult
    },
    default: {}
  },
  serializer
};

const queryIotHubOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "devices/query",
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.xMsContinuation,
    Parameters.xMsMaxItemCount
  ],
  requestBody: {
    parameterPath: "querySpecification",
    mapper: {
      ...Mappers.QuerySpecification,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Twin"
            }
          }
        }
      },
      headersMapper: Mappers.RegistryManagerQueryIotHubHeaders
    },
    default: {}
  },
  serializer
};

const getDeviceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "devices/{id}",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Device
    },
    default: {}
  },
  serializer
};

const createOrUpdateDeviceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "devices/{id}",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch
  ],
  requestBody: {
    parameterPath: "device",
    mapper: {
      ...Mappers.Device,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Device
    },
    default: {}
  },
  serializer
};

const deleteDeviceOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "devices/{id}",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch
  ],
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const purgeCommandQueueOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "devices/{id}/commands",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PurgeMessageQueueResult
    },
    default: {}
  },
  serializer
};

const getModulesOnDeviceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "devices/{id}/modules",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Module"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getModuleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "devices/{id}/modules/{mid}",
  urlParameters: [
    Parameters.id,
    Parameters.mid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Module
    },
    default: {}
  },
  serializer
};

const createOrUpdateModuleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "devices/{id}/modules/{mid}",
  urlParameters: [
    Parameters.id,
    Parameters.mid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch
  ],
  requestBody: {
    parameterPath: "module",
    mapper: {
      ...Mappers.Module,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Module
    },
    201: {
      bodyMapper: Mappers.Module
    },
    default: {}
  },
  serializer
};

const deleteModuleOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "devices/{id}/modules/{mid}",
  urlParameters: [
    Parameters.id,
    Parameters.mid
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch
  ],
  responses: {
    204: {},
    default: {}
  },
  serializer
};
